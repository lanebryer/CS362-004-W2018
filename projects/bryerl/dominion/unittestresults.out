------------Testing getCost() function--------------

Testing out of bounds value: Expected result: -1, Actual result: -1 - Test Passed!
Testing curse: Expected result: 0, Actual result: 0 - Test Passed!
Testing Estate: Expected result: 2, Actual result: 2 - Test Passed!
Testing Duchy: Expected result: 5, Actual result: 5 - Test Passed!
Testing province: Expected result: 8, Actual result: 8 - Test Passed!
Testing Copper: Expected result: 0, Actual result: 0 - Test Passed!
Testing Silver: Expected result: 3, Actual result: 3 - Test Passed!
Testing Gold: Expected result: 6, Actual result: 6 - Test Passed!
Testing adventurer: Expected result: 6, Actual result: 6 - Test Passed!
Testing council room: Expected result: 5, Actual result: 5 - Test Passed!
Testing feast: Expected result: 4, Actual result: 4 - Test Passed!
Testing gardens: Expected result: 4, Actual result: 4 - Test Passed!
Testing mine: Expected result: 5, Actual result: 5 - Test Passed!
Testing remodel: Expected result: 4, Actual result: 4 - Test Passed!
Testing smithy: Expected result: 4, Actual result: 4 - Test Passed!
Testing village: Expected result: 3, Actual result: 3 - Test Passed!
Testing baron: Expected result: 4, Actual result: 4 - Test Passed!
Testing great hall: Expected result: 3, Actual result: 3 - Test Passed!
Testing minion: Expected result: 5, Actual result: 5 - Test Passed!
Testing steward: Expected result: 3, Actual result: 3 - Test Passed!
Testing tribute: Expected result: 5, Actual result: 5 - Test Passed!
Testing ambassador: Expected result: 3, Actual result: 3 - Test Passed!
Testing cutpurse: Expected result: 4, Actual result: 4 - Test Passed!
Testing embargo: Expected result: 2, Actual result: 2 - Test Passed!
Testing outpost: Expected result: 5, Actual result: 5 - Test Passed!
Testing salvager: Expected result: 4, Actual result: 4 - Test Passed!
Testing sea hag: Expected result: 4, Actual result: 4 - Test Passed!
Testing treasure map: Expected result: 4, Actual result: 4 - Test Passed!
-------------Testing updateCoin() function--------------
Test update coins with: copper, copper, copper, copper, copper
Player should have 5 coins.  Player has 5 coins - Test passed!
Test update coins with: silver, silver, silver, silver, silver
Player should have 10 coins.  Player has 10 coins - Test passed!
Test update coins with: gold, gold, gold, gold, gold
Player should have 15 coins.  Player has 15 coins - Test passed!
Test update coins with: gold, gold, gold, gold, gold + 2 bonus
Player should have 17 coins.  Player has 17 coins - Test passed!
Test update coins with: feast, adventurer, sea_hag, tribute, duchy
Player should have 0 coins.  Player has 0 coins - Test passed!
------------Testing scoreFor() function-------------
Testing - hand: curse, discard: curse, deck: curse
Expected score: -3, actual score: -3 - Test passed!

Testing - hand: estate, discard: estate, deck: estate
Expected score: 3, actual score: 3 - Test passed!

Testing - hand: duchy, discard: duchy, deck: duchy
Expected score: 9, actual score: 9 - Test passed!

Testing - hand: province, discard: province, deck: province
Expected score: 18, actual score: 18 - Test passed!

Testing - hand: great_hall, discard: great_hall, deck: great_hall
Expected score: 3, actual score: 3 - Test passed!

Testing - hand: gardens, discard: gardens, deck: gardens
Expected score: 0, actual score: 0 - Test passed!

------------Testing getCost() function--------------

Testing out of bounds value: Expected result: -1, Actual result: -1 - Test Passed!
Testing curse: Expected result: 0, Actual result: 0 - Test Passed!
Testing Estate: Expected result: 2, Actual result: 2 - Test Passed!
Testing Duchy: Expected result: 5, Actual result: 5 - Test Passed!
Testing province: Expected result: 8, Actual result: 8 - Test Passed!
Testing Copper: Expected result: 0, Actual result: 0 - Test Passed!
Testing Silver: Expected result: 3, Actual result: 3 - Test Passed!
Testing Gold: Expected result: 6, Actual result: 6 - Test Passed!
Testing adventurer: Expected result: 6, Actual result: 6 - Test Passed!
Testing council room: Expected result: 5, Actual result: 5 - Test Passed!
Testing feast: Expected result: 4, Actual result: 4 - Test Passed!
Testing gardens: Expected result: 4, Actual result: 4 - Test Passed!
Testing mine: Expected result: 5, Actual result: 5 - Test Passed!
Testing remodel: Expected result: 4, Actual result: 4 - Test Passed!
Testing smithy: Expected result: 4, Actual result: 4 - Test Passed!
Testing village: Expected result: 3, Actual result: 3 - Test Passed!
Testing baron: Expected result: 4, Actual result: 4 - Test Passed!
Testing great hall: Expected result: 3, Actual result: 3 - Test Passed!
Testing minion: Expected result: 5, Actual result: 5 - Test Passed!
Testing steward: Expected result: 3, Actual result: 3 - Test Passed!
Testing tribute: Expected result: 5, Actual result: 5 - Test Passed!
Testing ambassador: Expected result: 3, Actual result: 3 - Test Passed!
Testing cutpurse: Expected result: 4, Actual result: 4 - Test Passed!
Testing embargo: Expected result: 2, Actual result: 2 - Test Passed!
Testing outpost: Expected result: 5, Actual result: 5 - Test Passed!
Testing salvager: Expected result: 4, Actual result: 4 - Test Passed!
Testing sea hag: Expected result: 4, Actual result: 4 - Test Passed!
Testing treasure map: Expected result: 4, Actual result: 4 - Test Passed!
-------------Testing updateCoin() function--------------
Test update coins with: copper, copper, copper, copper, copper
Player should have 5 coins.  Player has 5 coins - Test passed!
Test update coins with: silver, silver, silver, silver, silver
Player should have 10 coins.  Player has 10 coins - Test passed!
Test update coins with: gold, gold, gold, gold, gold
Player should have 15 coins.  Player has 15 coins - Test passed!
Test update coins with: gold, gold, gold, gold, gold + 2 bonus
Player should have 17 coins.  Player has 17 coins - Test passed!
Test update coins with: feast, adventurer, sea_hag, tribute, duchy
Player should have 0 coins.  Player has 0 coins - Test passed!
------------Testing scoreFor() function-------------
Testing - hand: curse, discard: curse, deck: curse
Expected score: -3, actual score: -3 - Test passed!

Testing - hand: estate, discard: estate, deck: estate
Expected score: 3, actual score: 3 - Test passed!

Testing - hand: duchy, discard: duchy, deck: duchy
Expected score: 9, actual score: 9 - Test passed!

Testing - hand: province, discard: province, deck: province
Expected score: 18, actual score: 18 - Test passed!

Testing - hand: great_hall, discard: great_hall, deck: great_hall
Expected score: 3, actual score: 3 - Test passed!

Testing - hand: gardens, discard: gardens, deck: gardens
Expected score: 0, actual score: 0 - Test passed!

-----------Testing supplyCount() function------------
Testing supply count of gold...
Expected value: 2, Actual value: 2 - Test passed!

Testing supply count of silver...
Expected value: 3, Actual value: 3 - Test passed!

Testing supply count of duchy...
Expected value: 0, Actual value: 0 - Test passed!

Testing supply count of curse...
Expected value: 7, Actual value: 7 - Test passed!

--------Testing smithy card----------
Checking for 3 cards drawn and 1 discarded...
Net card gain expected: 2, Actual card gain: 1 - Test failed!

Test for 1 card played...
Expected played: 1, Actual played: 1 - Test passed!

Test for deck count decrement...
Expected deck count decrease: 3, actual: 2 - Test failed!

Test for smithy removal...
Expected result: 0 (not found), actual result: 0 - Test passed!

--------Testing adventurer card----------
Testing that two cards were added to hand...
Expected result: 2, Actual result: 2 - Test passed!

Testing with no treasures in deck, 1 in discard pile...
Expected drawn treasures: 1, Actual result: 1 - Test passed!

--------Testing steward----------
Testing draw 2 cards...
Expected draw: 2, Actual draw: 2 - Test passed!

Testing that discard works...
Expected discard: 1, Actual discard: 1 - Test passed!

Testing adding 2 coins...
Coins expected: 2, Actual coins: 2 - Test passed!

Testing trashing two cards...
Expected discard: 2, Actual discard: 2 - Test passed!

--------Testing outpost card----------
Testing that outpost was incremented...
Expected result: 1, Actual result: 1 - Test passed!

Testing that card was discarded...
Expected played: 1, Actual played: 1 - Test passed!

------------Testing getCost() function--------------

Testing out of bounds value: Expected result: -1, Actual result: -1 - Test Passed!
Testing curse: Expected result: 0, Actual result: 0 - Test Passed!
Testing Estate: Expected result: 2, Actual result: 2 - Test Passed!
Testing Duchy: Expected result: 5, Actual result: 5 - Test Passed!
Testing province: Expected result: 8, Actual result: 8 - Test Passed!
Testing Copper: Expected result: 0, Actual result: 0 - Test Passed!
Testing Silver: Expected result: 3, Actual result: 3 - Test Passed!
Testing Gold: Expected result: 6, Actual result: 6 - Test Passed!
Testing adventurer: Expected result: 6, Actual result: 6 - Test Passed!
Testing council room: Expected result: 5, Actual result: 5 - Test Passed!
Testing feast: Expected result: 4, Actual result: 4 - Test Passed!
Testing gardens: Expected result: 4, Actual result: 4 - Test Passed!
Testing mine: Expected result: 5, Actual result: 5 - Test Passed!
Testing remodel: Expected result: 4, Actual result: 4 - Test Passed!
Testing smithy: Expected result: 4, Actual result: 4 - Test Passed!
Testing village: Expected result: 3, Actual result: 3 - Test Passed!
Testing baron: Expected result: 4, Actual result: 4 - Test Passed!
Testing great hall: Expected result: 3, Actual result: 3 - Test Passed!
Testing minion: Expected result: 5, Actual result: 5 - Test Passed!
Testing steward: Expected result: 3, Actual result: 3 - Test Passed!
Testing tribute: Expected result: 5, Actual result: 5 - Test Passed!
Testing ambassador: Expected result: 3, Actual result: 3 - Test Passed!
Testing cutpurse: Expected result: 4, Actual result: 4 - Test Passed!
Testing embargo: Expected result: 2, Actual result: 2 - Test Passed!
Testing outpost: Expected result: 5, Actual result: 5 - Test Passed!
Testing salvager: Expected result: 4, Actual result: 4 - Test Passed!
Testing sea hag: Expected result: 4, Actual result: 4 - Test Passed!
Testing treasure map: Expected result: 4, Actual result: 4 - Test Passed!
-------------Testing updateCoin() function--------------
Test update coins with: copper, copper, copper, copper, copper
Player should have 5 coins.  Player has 5 coins - Test passed!
Test update coins with: silver, silver, silver, silver, silver
Player should have 10 coins.  Player has 10 coins - Test passed!
Test update coins with: gold, gold, gold, gold, gold
Player should have 15 coins.  Player has 15 coins - Test passed!
Test update coins with: gold, gold, gold, gold, gold + 2 bonus
Player should have 17 coins.  Player has 17 coins - Test passed!
Test update coins with: feast, adventurer, sea_hag, tribute, duchy
Player should have 0 coins.  Player has 0 coins - Test passed!
------------Testing scoreFor() function-------------
Testing - hand: curse, discard: curse, deck: curse
Expected score: -3, actual score: -3 - Test passed!

Testing - hand: estate, discard: estate, deck: estate
Expected score: 3, actual score: 3 - Test passed!

Testing - hand: duchy, discard: duchy, deck: duchy
Expected score: 9, actual score: 9 - Test passed!

Testing - hand: province, discard: province, deck: province
Expected score: 18, actual score: 18 - Test passed!

Testing - hand: great_hall, discard: great_hall, deck: great_hall
Expected score: 3, actual score: 3 - Test passed!

Testing - hand: gardens, discard: gardens, deck: gardens
Expected score: 0, actual score: 0 - Test passed!

-----------Testing supplyCount() function------------
Testing supply count of gold...
Expected value: 2, Actual value: 2 - Test passed!

Testing supply count of silver...
Expected value: 3, Actual value: 3 - Test passed!

Testing supply count of duchy...
Expected value: 0, Actual value: 0 - Test passed!

Testing supply count of curse...
Expected value: 7, Actual value: 7 - Test passed!

--------Testing smithy card----------
Checking for 3 cards drawn and 1 discarded...
Net card gain expected: 2, Actual card gain: 1 - Test failed!

Test for 1 card played...
Expected played: 1, Actual played: 1 - Test passed!

Test for deck count decrement...
Expected deck count decrease: 3, actual: 2 - Test failed!

Test for smithy removal...
Expected result: 0 (not found), actual result: 0 - Test passed!

--------Testing adventurer card----------
Testing that two cards were added to hand...
Expected result: 2, Actual result: 2 - Test passed!

Testing with no treasures in deck, 1 in discard pile...
Expected drawn treasures: 1, Actual result: 1 - Test passed!

--------Testing steward----------
Testing draw 2 cards...
Expected draw: 2, Actual draw: 2 - Test passed!

Testing that discard works...
Expected discard: 1, Actual discard: 1 - Test passed!

Testing adding 2 coins...
Coins expected: 2, Actual coins: 2 - Test passed!

Testing trashing two cards...
Expected discard: 2, Actual discard: 2 - Test passed!

--------Testing outpost card----------
Testing that outpost was incremented...
Expected result: 1, Actual result: 1 - Test passed!

Testing that card was discarded...
Expected played: 1, Actual played: 1 - Test passed!

File 'unittest1.c'
Lines executed:80.82% of 146
Creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "rngs.h"
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://testing getCost()
       84:    9:int getCostTest(int card)
        -:   10:{
        -:   11:	int result;
       84:   12:	result = getCost(card);
       84:   13:	return result;
        -:   14:}
        -:   15:
        3:   16:int main()
        -:   17:{
        -:   18:	int result;
        -:   19:	
        3:   20:	printf("------------Testing getCost() function--------------\n\n");
        3:   21:	result = getCostTest(-1);
        3:   22:	printf("Testing out of bounds value: Expected result: -1, Actual result: %d - ", result);
        3:   23:	if (result == -1)
        -:   24:	{
        3:   25:		printf("Test Passed!\n");
        -:   26:	}
        -:   27:	else{
    #####:   28:		printf("Test failed!\n");
        -:   29:	}
        -:   30:	
        3:   31:	result = getCostTest(0);
        3:   32:	printf("Testing curse: Expected result: 0, Actual result: %d - ", result);
        3:   33:	if (result == 0)
        -:   34:	{
        3:   35:		printf("Test Passed!\n");
        -:   36:	}
        -:   37:	else{
    #####:   38:		printf("Test failed!\n");
        -:   39:	}
        -:   40:	
        3:   41:	result = getCostTest(1);
        3:   42:	printf("Testing Estate: Expected result: 2, Actual result: %d - ", result);
        3:   43:	if (result == 2)
        -:   44:	{
        3:   45:		printf("Test Passed!\n");
        -:   46:	}
        -:   47:	else{
    #####:   48:		printf("Test failed!\n");
        -:   49:	}
        -:   50:	
        3:   51:	result = getCostTest(2);
        3:   52:	printf("Testing Duchy: Expected result: 5, Actual result: %d - ", result);
        3:   53:	if (result == 5)
        -:   54:	{
        3:   55:		printf("Test Passed!\n");
        -:   56:	}
        -:   57:	else{
    #####:   58:		printf("Test failed!\n");
        -:   59:	}
        -:   60:	
        3:   61:	result = getCostTest(3);
        3:   62:	printf("Testing province: Expected result: 8, Actual result: %d - ", result);
        3:   63:	if (result == 8)
        -:   64:	{
        3:   65:		printf("Test Passed!\n");
        -:   66:	}
        -:   67:	else{
    #####:   68:		printf("Test failed!\n");
        -:   69:	}
        -:   70:	
        3:   71:	result = getCostTest(4);
        3:   72:	printf("Testing Copper: Expected result: 0, Actual result: %d - ", result);
        3:   73:	if (result == 0)
        -:   74:	{
        3:   75:		printf("Test Passed!\n");
        -:   76:	}
        -:   77:	else{
    #####:   78:		printf("Test failed!\n");
        -:   79:	}
        -:   80:	
        3:   81:		result = getCostTest(5);
        3:   82:	printf("Testing Silver: Expected result: 3, Actual result: %d - ", result);
        3:   83:	if (result == 3)
        -:   84:	{
        3:   85:		printf("Test Passed!\n");
        -:   86:	}
        -:   87:	else{
    #####:   88:		printf("Test failed!\n");
        -:   89:	}
        -:   90:	
        3:   91:		result = getCostTest(6);
        3:   92:	printf("Testing Gold: Expected result: 6, Actual result: %d - ", result);
        3:   93:	if (result == 6)
        -:   94:	{
        3:   95:		printf("Test Passed!\n");
        -:   96:	}
        -:   97:	else{
    #####:   98:		printf("Test failed!\n");
        -:   99:	}
        -:  100:	
        3:  101:		result = getCostTest(7);
        3:  102:	printf("Testing adventurer: Expected result: 6, Actual result: %d - ", result);
        3:  103:	if (result == 6)
        -:  104:	{
        3:  105:		printf("Test Passed!\n");
        -:  106:	}
        -:  107:	else{
    #####:  108:		printf("Test failed!\n");
        -:  109:	}
        -:  110:	
        3:  111:		result = getCostTest(8);
        3:  112:	printf("Testing council room: Expected result: 5, Actual result: %d - ", result);
        3:  113:	if (result == 5)
        -:  114:	{
        3:  115:		printf("Test Passed!\n");
        -:  116:	}
        -:  117:	else{
    #####:  118:		printf("Test failed!\n");
        -:  119:	}
        -:  120:	
        3:  121:			result = getCostTest(9);
        3:  122:	printf("Testing feast: Expected result: 4, Actual result: %d - ", result);
        3:  123:	if (result == 4)
        -:  124:	{
        3:  125:		printf("Test Passed!\n");
        -:  126:	}
        -:  127:	else{
    #####:  128:		printf("Test failed!\n");
        -:  129:	}
        -:  130:	
        3:  131:			result = getCostTest(10);
        3:  132:	printf("Testing gardens: Expected result: 4, Actual result: %d - ", result);
        3:  133:	if (result == 4)
        -:  134:	{
        3:  135:		printf("Test Passed!\n");
        -:  136:	}
        -:  137:	else{
    #####:  138:		printf("Test failed!\n");
        -:  139:	}
        -:  140:	
        3:  141:			result = getCostTest(11);
        3:  142:	printf("Testing mine: Expected result: 5, Actual result: %d - ", result);
        3:  143:	if (result == 5)
        -:  144:	{
        3:  145:		printf("Test Passed!\n");
        -:  146:	}
        -:  147:	else{
    #####:  148:		printf("Test failed!\n");
        -:  149:	}
        -:  150:	
        3:  151:			result = getCostTest(12);
        3:  152:	printf("Testing remodel: Expected result: 4, Actual result: %d - ", result);
        3:  153:	if (result == 4)
        -:  154:	{
        3:  155:		printf("Test Passed!\n");
        -:  156:	}
        -:  157:	else{
    #####:  158:		printf("Test failed!\n");
        -:  159:	}
        -:  160:	
        3:  161:			result = getCostTest(13);
        3:  162:	printf("Testing smithy: Expected result: 4, Actual result: %d - ", result);
        3:  163:	if (result == 4)
        -:  164:	{
        3:  165:		printf("Test Passed!\n");
        -:  166:	}
        -:  167:	else{
    #####:  168:		printf("Test failed!\n");
        -:  169:	}
        -:  170:	
        3:  171:			result = getCostTest(14);
        3:  172:	printf("Testing village: Expected result: 3, Actual result: %d - ", result);
        3:  173:	if (result == 3)
        -:  174:	{
        3:  175:		printf("Test Passed!\n");
        -:  176:	}
        -:  177:	else{
    #####:  178:		printf("Test failed!\n");
        -:  179:	}
        -:  180:	
        3:  181:			result = getCostTest(15);
        3:  182:	printf("Testing baron: Expected result: 4, Actual result: %d - ", result);
        3:  183:	if (result == 4)
        -:  184:	{
        3:  185:		printf("Test Passed!\n");
        -:  186:	}
        -:  187:	else{
    #####:  188:		printf("Test failed!\n");
        -:  189:	}
        -:  190:	
        3:  191:			result = getCostTest(16);
        3:  192:	printf("Testing great hall: Expected result: 3, Actual result: %d - ", result);
        3:  193:	if (result == 3)
        -:  194:	{
        3:  195:		printf("Test Passed!\n");
        -:  196:	}
        -:  197:	else{
    #####:  198:		printf("Test failed!\n");
        -:  199:	}
        -:  200:	
        3:  201:			result = getCostTest(17);
        3:  202:	printf("Testing minion: Expected result: 5, Actual result: %d - ", result);
        3:  203:	if (result == 5)
        -:  204:	{
        3:  205:		printf("Test Passed!\n");
        -:  206:	}
        -:  207:	else{
    #####:  208:		printf("Test failed!\n");
        -:  209:	}
        -:  210:	
        3:  211:			result = getCostTest(18);
        3:  212:	printf("Testing steward: Expected result: 3, Actual result: %d - ", result);
        3:  213:	if (result == 3)
        -:  214:	{
        3:  215:		printf("Test Passed!\n");
        -:  216:	}
        -:  217:	else{
    #####:  218:		printf("Test failed!\n");
        -:  219:	}
        -:  220:	
        3:  221:			result = getCostTest(19);
        3:  222:	printf("Testing tribute: Expected result: 5, Actual result: %d - ", result);
        3:  223:	if (result == 5)
        -:  224:	{
        3:  225:		printf("Test Passed!\n");
        -:  226:	}
        -:  227:	else{
    #####:  228:		printf("Test failed!\n");
        -:  229:	}
        -:  230:	
        3:  231:				result = getCostTest(20);
        3:  232:	printf("Testing ambassador: Expected result: 3, Actual result: %d - ", result);
        3:  233:	if (result == 3)
        -:  234:	{
        3:  235:		printf("Test Passed!\n");
        -:  236:	}
        -:  237:	else{
    #####:  238:		printf("Test failed!\n");
        -:  239:	}
        -:  240:	
        3:  241:				result = getCostTest(21);
        3:  242:	printf("Testing cutpurse: Expected result: 4, Actual result: %d - ", result);
        3:  243:	if (result == 4)
        -:  244:	{
        3:  245:		printf("Test Passed!\n");
        -:  246:	}
        -:  247:	else{
    #####:  248:		printf("Test failed!\n");
        -:  249:	}
        -:  250:	
        3:  251:				result = getCostTest(22);
        3:  252:	printf("Testing embargo: Expected result: 2, Actual result: %d - ", result);
        3:  253:	if (result == 2)
        -:  254:	{
        3:  255:		printf("Test Passed!\n");
        -:  256:	}
        -:  257:	else{
    #####:  258:		printf("Test failed!\n");
        -:  259:	}
        -:  260:	
        3:  261:				result = getCostTest(23);
        3:  262:	printf("Testing outpost: Expected result: 5, Actual result: %d - ", result);
        3:  263:	if (result == 5)
        -:  264:	{
        3:  265:		printf("Test Passed!\n");
        -:  266:	}
        -:  267:	else{
    #####:  268:		printf("Test failed!\n");
        -:  269:	}
        -:  270:	
        3:  271:				result = getCostTest(24);
        3:  272:	printf("Testing salvager: Expected result: 4, Actual result: %d - ", result);
        3:  273:	if (result == 4)
        -:  274:	{
        3:  275:		printf("Test Passed!\n");
        -:  276:	}
        -:  277:	else{
    #####:  278:		printf("Test failed!\n");
        -:  279:	}
        -:  280:	
        3:  281:					result = getCostTest(25);
        3:  282:	printf("Testing sea hag: Expected result: 4, Actual result: %d - ", result);
        3:  283:	if (result == 4)
        -:  284:	{
        3:  285:		printf("Test Passed!\n");
        -:  286:	}
        -:  287:	else{
    #####:  288:		printf("Test failed!\n");
        -:  289:	}
        -:  290:	
        3:  291:					result = getCostTest(26);
        3:  292:	printf("Testing treasure map: Expected result: 4, Actual result: %d - ", result);
        3:  293:	if (result == 4)
        -:  294:	{
        3:  295:		printf("Test Passed!\n");
        -:  296:	}
        -:  297:	else{
    #####:  298:		printf("Test failed!\n");
        -:  299:	}
        3:  300:	return 0;
        -:  301:}
        -:  302:	
        -:  303:	
        -:  304:
        -:  305:	
File 'unittest2.c'
Lines executed:92.06% of 63
Creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "rngs.h"
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://testing update coin function
        3:    9:int main()
        -:   10:{
        3:   11:    int seed = 1000;
        3:   12:    int numPlayer = 2;
        -:   13:    int bonus;
        3:   14:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   15:               , remodel, smithy, village, baron, great_hall};
        -:   16:    struct gameState G;
        -:   17:
        3:   18:	initializeGame(numPlayer, k, seed, &G);
        3:   19:	printf("-------------Testing updateCoin() function--------------\n");
        3:   20:	printf("Test update coins with: copper, copper, copper, copper, copper\n");
        3:   21:	G.hand[0][0] = copper;
        3:   22:	G.hand[0][1] = copper;
        3:   23:	G.hand[0][2] = copper;
        3:   24:	G.hand[0][3] = copper;
        3:   25:	G.hand[0][4] = copper;
        3:   26:	updateCoins(0, &G, 0);
        3:   27:	printf("Player should have 5 coins.  Player has %d coins - ", G.coins);
        3:   28:	if (G.coins == 5)
        -:   29:	{
        3:   30:		printf("Test passed!\n");
        -:   31:	}
        -:   32:	else
        -:   33:	{
    #####:   34:		printf("Test failed!\n");
        -:   35:	}
        -:   36:	
        3:   37:	printf("Test update coins with: silver, silver, silver, silver, silver\n");
        3:   38:	G.hand[0][0] = silver;
        3:   39:	G.hand[0][1] = silver;
        3:   40:	G.hand[0][2] = silver;
        3:   41:	G.hand[0][3] = silver;
        3:   42:	G.hand[0][4] = silver;
        3:   43:	updateCoins(0, &G, 0);
        3:   44:	printf("Player should have 10 coins.  Player has %d coins - ", G.coins);
        3:   45:	if (G.coins == 10)
        -:   46:	{
        3:   47:		printf("Test passed!\n");
        -:   48:	}
        -:   49:	else
        -:   50:	{
    #####:   51:		printf("Test failed!\n");
        -:   52:	}
        -:   53:	
        3:   54:	printf("Test update coins with: gold, gold, gold, gold, gold\n");
        3:   55:	G.hand[0][0] = gold;
        3:   56:	G.hand[0][1] = gold;
        3:   57:	G.hand[0][2] = gold;
        3:   58:	G.hand[0][3] = gold;
        3:   59:	G.hand[0][4] = gold;
        3:   60:	updateCoins(0, &G, 0);
        3:   61:	printf("Player should have 15 coins.  Player has %d coins - ", G.coins);
        3:   62:	if (G.coins == 15)
        -:   63:	{
        3:   64:		printf("Test passed!\n");
        -:   65:	}
        -:   66:	else
        -:   67:	{
    #####:   68:		printf("Test failed!\n");
        -:   69:	}
        -:   70:	
        3:   71:	printf("Test update coins with: gold, gold, gold, gold, gold + 2 bonus\n");
        3:   72:	bonus = 2;
        3:   73:	G.hand[0][0] = gold;
        3:   74:	G.hand[0][1] = gold;
        3:   75:	G.hand[0][2] = gold;
        3:   76:	G.hand[0][3] = gold;
        3:   77:	G.hand[0][4] = gold;
        3:   78:	updateCoins(0, &G, bonus);
        3:   79:	printf("Player should have 17 coins.  Player has %d coins - ", G.coins);
        3:   80:	if (G.coins == 17)
        -:   81:	{
        3:   82:		printf("Test passed!\n");
        -:   83:	}
        -:   84:	else
        -:   85:	{
    #####:   86:		printf("Test failed!\n");
        -:   87:	}
        -:   88:	
        3:   89:	printf("Test update coins with: feast, adventurer, sea_hag, tribute, duchy\n");
        3:   90:	G.hand[0][0] = feast;
        3:   91:	G.hand[0][1] = adventurer;
        3:   92:	G.hand[0][2] = sea_hag;
        3:   93:	G.hand[0][3] = tribute;
        3:   94:	G.hand[0][4] = duchy;
        3:   95:	updateCoins(0, &G, 0);
        3:   96:	printf("Player should have 0 coins.  Player has %d coins - ", G.coins);
        3:   97:	if (G.coins == 0)
        -:   98:	{
        3:   99:		printf("Test passed!\n");
        -:  100:	}
        -:  101:	else
        -:  102:	{
    #####:  103:		printf("Test failed!\n");
        -:  104:	}
        3:  105:	return 0;
        -:  106:}
        -:  107:	
        -:  108:	
File 'unittest3.c'
Lines executed:90.77% of 65
Branches executed:100.00% of 14
Taken at least once:57.14% of 14
Calls executed:81.25% of 32
Creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "rngs.h"
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://testing scoreFor() function
function main called 2 returned 100% blocks executed 86%
        2:    9:int main()
        -:   10:{
        -:   11:	int result;
        -:   12:	int i;
        2:   13:    int seed = 1000;
        2:   14:    int numPlayer = 2;
        2:   15:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   16:               , remodel, smithy, village, baron, great_hall};
        -:   17:    struct gameState G;
        -:   18:
        2:   19:	initializeGame(numPlayer, k, seed, &G);	
call    0 returned 100%
        -:   20:		
        6:   21:	for (i = 0; i < numPlayer; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   22:	{
        4:   23:		G.handCount[i] = 1;
        4:   24:		G.discardCount[i] = 1;
        4:   25:		G.deckCount[i] = 1;
        -:   26:	}
        -:   27:	
        2:   28:	G.hand[0][0] = curse;
        2:   29:	G.discard[0][0] = curse;
        2:   30:	G.deck[0][0] = curse;
        2:   31:	G.hand[1][0] = estate;
        2:   32:	G.discard[1][0] = estate;
        2:   33:	G.deck[1][0] = estate;
        -:   34:
        2:   35:	printf("------------Testing scoreFor() function-------------\n");
call    0 returned 100%
        2:   36:	printf("Testing - hand: curse, discard: curse, deck: curse\n");
call    0 returned 100%
        2:   37:	result = scoreFor(0, &G);
call    0 returned 100%
        2:   38:	printf("Expected score: -3, actual score: %d - ", result);
call    0 returned 100%
        2:   39:	if (result == -3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   40:	{
        2:   41:		printf("Test passed!\n\n");
call    0 returned 100%
        -:   42:	}
        -:   43:	else{
    #####:   44:		printf("Test failed!\n\n");
call    0 never executed
        -:   45:	}
        -:   46:	
        2:   47:	printf("Testing - hand: estate, discard: estate, deck: estate\n");
call    0 returned 100%
        2:   48:	result = scoreFor(1, &G);
call    0 returned 100%
        2:   49:	printf("Expected score: 3, actual score: %d - ", result);
call    0 returned 100%
        2:   50:	if (result == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   51:	{
        2:   52:		printf("Test passed!\n\n");
call    0 returned 100%
        -:   53:	}
        -:   54:	else{
    #####:   55:		printf("Test failed!\n\n");
call    0 never executed
        -:   56:	}	
        -:   57:	
        2:   58:	G.hand[0][0] = duchy;
        2:   59:	G.discard[0][0] = duchy;
        2:   60:	G.deck[0][0] = duchy;	
        2:   61:	G.hand[1][0] = province;
        2:   62:	G.discard[1][0] = province;
        2:   63:	G.deck[1][0] = province;	
        -:   64:
        2:   65:	printf("Testing - hand: duchy, discard: duchy, deck: duchy\n");
call    0 returned 100%
        2:   66:	result = scoreFor(0, &G);
call    0 returned 100%
        2:   67:	printf("Expected score: 9, actual score: %d - ", result);
call    0 returned 100%
        2:   68:	if (result == 9)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   69:	{
        2:   70:		printf("Test passed!\n\n");
call    0 returned 100%
        -:   71:	}
        -:   72:	else{
    #####:   73:		printf("Test failed!\n\n");
call    0 never executed
        -:   74:	}	
        -:   75:	
        2:   76:	printf("Testing - hand: province, discard: province, deck: province\n");
call    0 returned 100%
        2:   77:	result = scoreFor(1, &G);
call    0 returned 100%
        2:   78:	printf("Expected score: 18, actual score: %d - ", result);
call    0 returned 100%
        2:   79:	if (result == 18)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   80:	{
        2:   81:		printf("Test passed!\n\n");
call    0 returned 100%
        -:   82:	}
        -:   83:	else{
    #####:   84:		printf("Test failed!\n\n");
call    0 never executed
        -:   85:	}
        -:   86:	
        2:   87:	G.hand[0][0] = great_hall;
        2:   88:	G.discard[0][0] = great_hall;
        2:   89:	G.deck[0][0] = great_hall;	
        2:   90:	G.hand[1][0] = gardens;
        2:   91:	G.discard[1][0] = gardens;
        2:   92:	G.deck[1][0] = gardens;
        -:   93:	
        2:   94:	printf("Testing - hand: great_hall, discard: great_hall, deck: great_hall\n");
call    0 returned 100%
        2:   95:	result = scoreFor(0, &G);
call    0 returned 100%
        2:   96:	printf("Expected score: 3, actual score: %d - ", result);
call    0 returned 100%
        2:   97:	if (result == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   98:	{
        2:   99:		printf("Test passed!\n\n");
call    0 returned 100%
        -:  100:	}
        -:  101:	else{
    #####:  102:		printf("Test failed!\n\n");
call    0 never executed
        -:  103:	}
        -:  104:	
        2:  105:	printf("Testing - hand: gardens, discard: gardens, deck: gardens\n");
call    0 returned 100%
        2:  106:	result = scoreFor(1, &G);
call    0 returned 100%
        2:  107:	printf("Expected score: 0, actual score: %d - ", result);
call    0 returned 100%
        2:  108:	if (result == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  109:	{
        2:  110:		printf("Test passed!\n\n");
call    0 returned 100%
        -:  111:	}
        -:  112:	else{
    #####:  113:		printf("Test failed!\n\n");
call    0 never executed
        -:  114:	}
        2:  115:	return 0;
        -:  116:}
        -:  117:
        -:  118:	
        -:  119:	
File 'unittest4.c'
Lines executed:88.57% of 35
Branches executed:100.00% of 8
Taken at least once:50.00% of 8
Calls executed:81.82% of 22
Creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "rngs.h"
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://testing supplyCount() function
function main called 2 returned 100% blocks executed 86%
        2:    9:int main()
        -:   10:{
        -:   11:	int result;
        2:   12:    int seed = 1000;
        2:   13:    int numPlayer = 2;
        2:   14:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   15:               , remodel, smithy, village, baron, great_hall};
        -:   16:    struct gameState G;
        -:   17:
        2:   18:	initializeGame(numPlayer, k, seed, &G);	
call    0 returned 100%
        -:   19:	
        2:   20:	G.supplyCount[gold] = 2;
        2:   21:	G.supplyCount[silver] = 3;
        2:   22:	G.supplyCount[duchy] = 0;
        2:   23:	G.supplyCount[curse] = 7;
        -:   24:	
        2:   25:	printf("-----------Testing supplyCount() function------------\n");
call    0 returned 100%
        2:   26:	result = supplyCount(gold, &G);
call    0 returned 100%
        2:   27:	printf("Testing supply count of gold...\n");
call    0 returned 100%
        2:   28:	printf("Expected value: 2, Actual value: %d - ", result);
call    0 returned 100%
        2:   29:	if (result == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   30:	{
        2:   31:		printf("Test passed!\n\n");
call    0 returned 100%
        -:   32:	}
        -:   33:	else{
    #####:   34:		printf("Test failed!\n\n");
call    0 never executed
        -:   35:	}
        -:   36:	
        2:   37:	result = supplyCount(silver, &G);
call    0 returned 100%
        2:   38:	printf("Testing supply count of silver...\n");
call    0 returned 100%
        2:   39:	printf("Expected value: 3, Actual value: %d - ", result);
call    0 returned 100%
        2:   40:	if (result == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   41:	{
        2:   42:		printf("Test passed!\n\n");
call    0 returned 100%
        -:   43:	}
        -:   44:	else{
    #####:   45:		printf("Test failed!\n\n");
call    0 never executed
        -:   46:	}
        -:   47:	
        2:   48:	result = supplyCount(duchy, &G);
call    0 returned 100%
        2:   49:	printf("Testing supply count of duchy...\n");
call    0 returned 100%
        2:   50:	printf("Expected value: 0, Actual value: %d - ", result);
call    0 returned 100%
        2:   51:	if (result == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   52:	{
        2:   53:		printf("Test passed!\n\n");
call    0 returned 100%
        -:   54:	}
        -:   55:	else{
    #####:   56:		printf("Test failed!\n\n");
call    0 never executed
        -:   57:	}
        -:   58:	
        2:   59:	result = supplyCount(curse, &G);
call    0 returned 100%
        2:   60:	printf("Testing supply count of curse...\n");
call    0 returned 100%
        2:   61:	printf("Expected value: 7, Actual value: %d - ", result);
call    0 returned 100%
        2:   62:	if (result == 7)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   63:	{
        2:   64:		printf("Test passed!\n\n");
call    0 returned 100%
        -:   65:	}
        -:   66:	else{
    #####:   67:		printf("Test failed!\n\n");
call    0 never executed
        -:   68:	}
        2:   69:	return 0;	
        -:   70:}
File 'cardtest1.c'
Lines executed:87.18% of 39
Branches executed:100.00% of 12
Taken at least once:58.33% of 12
Calls executed:78.95% of 19
Creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "rngs.h"
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9://Testing smithy card
function main called 2 returned 100% blocks executed 83%
        2:   10:int main()
        -:   11:{
        -:   12:	int result;
        -:   13:	int i;
        2:   14:    int seed = 1000;
        2:   15:    int numPlayer = 2;
        2:   16:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   17:               , remodel, smithy, village, baron, great_hall};
        -:   18:    struct gameState G;
        -:   19:	struct gameState testState;
        -:   20:	int choice1, choice2, choice3, bonus, handPos;
        2:   21:	choice1 = choice2 = choice3 = bonus = handPos = 0;
        -:   22:	
        -:   23:
        2:   24:	initializeGame(numPlayer, k, seed, &G);	
call    0 returned 100%
        2:   25:	G.hand[0][0] = smithy;
        2:   26:	G.whoseTurn = 0;
        2:   27:	memcpy(&testState, &G, sizeof(struct gameState));
        -:   28:   	
        2:   29:	printf("--------Testing smithy card----------\n");
call    0 returned 100%
        2:   30:	cardEffect(smithy, choice1, choice2, choice3, &testState, handPos, &bonus);
call    0 returned 100%
        2:   31:	result = testState.handCount[0] - G.handCount[0];
        2:   32:	printf("Checking for 3 cards drawn and 1 discarded...\n");
call    0 returned 100%
        2:   33:	printf("Net card gain expected: 2, Actual card gain: %d - ", result);
call    0 returned 100%
        2:   34:	if(result == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   35:	{
    #####:   36:		printf("Test passed!\n\n");
call    0 never executed
        -:   37:	}
        -:   38:	else
        -:   39:	{
        2:   40:		printf("Test failed!\n\n");
call    0 returned 100%
        -:   41:	}
        -:   42:	
        2:   43:	printf("Test for 1 card played...\n");	
call    0 returned 100%
        2:   44:	result = testState.playedCardCount;
        2:   45:	printf("Expected played: 1, Actual played: %d - ", result);
call    0 returned 100%
        2:   46:	if (result == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   47:	{
        2:   48:		printf("Test passed!\n\n");
call    0 returned 100%
        -:   49:	}
        -:   50:	else{
    #####:   51:		printf("Test failed!\n\n");
call    0 never executed
        -:   52:	}
        -:   53:	
        2:   54:	printf("Test for deck count decrement...\n");
call    0 returned 100%
        2:   55:	result = G.deckCount[0] - testState.deckCount[0];
        2:   56:	printf("Expected deck count decrease: 3, actual: %d - ", result);
call    0 returned 100%
        2:   57:	if(result == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   58:	{
    #####:   59:		printf("Test passed!\n\n");
call    0 never executed
        -:   60:	}
        -:   61:	else{
        2:   62:		printf("Test failed!\n\n");
call    0 returned 100%
        -:   63:	}
        -:   64:	
        2:   65:	printf("Test for smithy removal...\n");
call    0 returned 100%
        2:   66:	result = 0;
       14:   67:	for (i = 0; i < testState.handCount[0]; i++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:   68:	{
       12:   69:		if (testState.hand[0][i] == smithy)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   70:		{
    #####:   71:			result = 1;
        -:   72:		}
        -:   73:	}
        2:   74:	printf("Expected result: 0 (not found), actual result: %d - ", result);
call    0 returned 100%
        2:   75:	if(result == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   76:	{
        2:   77:		printf("Test passed!\n\n");
call    0 returned 100%
        -:   78:	}
        -:   79:	else
        -:   80:	{
    #####:   81:		printf("Test failed!\n\n");
call    0 never executed
        -:   82:	}
        2:   83:	return 0;
        -:   84:}
        -:   85:	
File 'cardtest2.c'
Lines executed:93.55% of 31
Branches executed:100.00% of 4
Taken at least once:50.00% of 4
Calls executed:83.33% of 12
Creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "rngs.h"
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9://Testing adventurer card
function main called 2 returned 100% blocks executed 88%
        2:   10:int main()
        -:   11:{
        -:   12:	int result;
        2:   13:    int seed = 1000;
        2:   14:    int numPlayer = 2;
        2:   15:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   16:               , remodel, smithy, village, baron, great_hall};
        -:   17:    struct gameState G;
        -:   18:	struct gameState testState;
        -:   19:	int choice1, choice2, choice3, bonus, handPos;
        2:   20:	choice1 = choice2 = choice3 = bonus = handPos = 0;
        -:   21:	
        -:   22:
        2:   23:	initializeGame(numPlayer, k, seed, &G);	
call    0 returned 100%
        2:   24:	G.whoseTurn = 0;
        2:   25:	memcpy(&testState, &G, sizeof(struct gameState));
        -:   26:   	
        2:   27:	printf("--------Testing adventurer card----------\n");
call    0 returned 100%
        2:   28:	cardEffect(adventurer, choice1, choice2, choice3, &testState, handPos, &bonus);
call    0 returned 100%
        2:   29:	printf("Testing that two cards were added to hand...\n");
call    0 returned 100%
        2:   30:	result = testState.handCount[0] - G.handCount[0];
        2:   31:	printf("Expected result: 2, Actual result: %d - ", result);
call    0 returned 100%
        2:   32:	if (result == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   33:	{
        2:   34:		printf("Test passed!\n\n");
call    0 returned 100%
        -:   35:	}
        -:   36:	else{
    #####:   37:		printf("Test failed!\n\n");
call    0 never executed
        -:   38:	}
        -:   39:	
        2:   40:	G.discard[0][0] = copper;
        2:   41:	G.discard[0][1] = smithy;
        2:   42:	G.discardCount[0] = 2;
        2:   43:	G.deckCount[0] = 2;
        2:   44:	G.deck[0][0] = smithy;
        2:   45:	G.deck [0][1] = adventurer;
        2:   46:	memcpy(&testState, &G, sizeof(struct gameState));
        -:   47:	
        2:   48:	cardEffect(adventurer, choice1, choice2, choice3, &testState, handPos, &bonus);
call    0 returned 100%
        2:   49:	printf("Testing with no treasures in deck, 1 in discard pile...\n");
call    0 returned 100%
        2:   50:	result = testState.handCount[0] - G.handCount[0];
        2:   51:	printf("Expected drawn treasures: 1, Actual result: %d - ", result);
call    0 returned 100%
        2:   52:	if (result == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   53:	{
        2:   54:		printf("Test passed!\n\n");
call    0 returned 100%
        -:   55:	}
        -:   56:	else
        -:   57:	{
    #####:   58:		printf("Test failed!\n\n");
call    0 never executed
        -:   59:}
        2:   60:return 0;
        -:   61:}
        -:   62:	
        -:   63:	
File 'cardtest3.c'
Lines executed:90.48% of 42
Branches executed:100.00% of 8
Taken at least once:50.00% of 8
Calls executed:80.95% of 21
Creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "rngs.h"
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9://Testing steward card
function main called 2 returned 100% blocks executed 85%
        2:   10:int main()
        -:   11:{
        -:   12:	int result;
        2:   13:    int seed = 1000;
        2:   14:    int numPlayer = 2;
        2:   15:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   16:               , remodel, smithy, village, baron, great_hall};
        -:   17:    struct gameState G;
        -:   18:	struct gameState testState;
        -:   19:	int choice1, choice2, choice3, bonus, handPos;
        2:   20:	choice1 = choice2 = choice3 = bonus = handPos = 0;
        -:   21:	
        -:   22:
        2:   23:	initializeGame(numPlayer, k, seed, &G);	
call    0 returned 100%
        2:   24:	G.whoseTurn = 0;
        2:   25:	memcpy(&testState, &G, sizeof(struct gameState));
        -:   26:	
        2:   27:	choice1 = 1;
        2:   28:	cardEffect(steward, choice1, choice2, choice3, &testState, handPos, &bonus);
call    0 returned 100%
        2:   29:	printf("--------Testing steward----------\n");
call    0 returned 100%
        2:   30:	printf("Testing draw 2 cards...\n");
call    0 returned 100%
        2:   31:	result = testState.handCount[0] - G.handCount[0] + 1; //adds one to cover the discarded card
        2:   32:	printf("Expected draw: 2, Actual draw: %d - ", result);
call    0 returned 100%
        2:   33:	if (result == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   34:	{
        2:   35:		printf("Test passed!\n\n");
call    0 returned 100%
        -:   36:	}
        -:   37:	else{
    #####:   38:		printf("Test failed!\n\n");
call    0 never executed
        -:   39:	}
        -:   40:	
        2:   41:	printf("Testing that discard works...\n");
call    0 returned 100%
        2:   42:	result = testState.playedCardCount;
        2:   43:	printf("Expected discard: 1, Actual discard: %d - ", result);
call    0 returned 100%
        2:   44:	if (result == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   45:	{
        2:   46:		printf("Test passed!\n\n");
call    0 returned 100%
        -:   47:	}
        -:   48:	else
        -:   49:	{
    #####:   50:		printf("Test failed!\n\n");
call    0 never executed
        -:   51:	}
        -:   52:	
        2:   53:	memcpy(&testState, &G, sizeof(struct gameState));
        2:   54:	choice1 = 2;
        2:   55:	cardEffect(steward, choice1, choice2, choice3, &testState, handPos, &bonus);
call    0 returned 100%
        2:   56:	printf("Testing adding 2 coins...\n");
call    0 returned 100%
        2:   57:	result = testState.coins - G.coins;
        2:   58:	printf("Coins expected: 2, Actual coins: %d - ", result);
call    0 returned 100%
        2:   59:	if (result == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   60:	{
        2:   61:		printf("Test passed!\n\n");
call    0 returned 100%
        -:   62:	}
        -:   63:	else{
    #####:   64:		printf("Test failed!\n\n");
call    0 never executed
        -:   65:	}
        -:   66:	
        2:   67:	memcpy(&testState, &G, sizeof(struct gameState));
        2:   68:	choice1 = 3;
        2:   69:	cardEffect(steward, choice1, choice2, choice3, &testState, handPos, &bonus);
call    0 returned 100%
        2:   70:	printf("Testing trashing two cards...\n");
call    0 returned 100%
        2:   71:	result = G.handCount[0] - testState.handCount[0] - 1; //subtract 1 to cover for the card that was played and discarded
        2:   72:	printf("Expected discard: 2, Actual discard: %d - ", result);
call    0 returned 100%
        2:   73:	if (result == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:	{
        2:   75:		printf("Test passed!\n\n");
call    0 returned 100%
        -:   76:	}
        -:   77:	else{
    #####:   78:		printf("Test failed!\n\n");
call    0 never executed
        -:   79:	}
        2:   80:	return 0;
        -:   81:	
        -:   82:}
File 'cardtest4.c'
Lines executed:91.30% of 23
Branches executed:100.00% of 4
Taken at least once:50.00% of 4
Calls executed:81.82% of 11
Creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "rngs.h"
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9://Testing outpost card
function main called 1 returned 100% blocks executed 87%
        1:   10:int main()
        -:   11:{
        -:   12:	int result;
        1:   13:    int seed = 1000;
        1:   14:    int numPlayer = 2;
        1:   15:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   16:               , remodel, smithy, village, baron, great_hall};
        -:   17:    struct gameState G;
        -:   18:	struct gameState testState;
        -:   19:	int choice1, choice2, choice3, bonus, handPos;
        1:   20:	choice1 = choice2 = choice3 = bonus = handPos = 0;
        -:   21:	
        -:   22:
        1:   23:	initializeGame(numPlayer, k, seed, &G);	
call    0 returned 100%
        1:   24:	G.whoseTurn = 0;
        1:   25:	memcpy(&testState, &G, sizeof(struct gameState));
        -:   26:	
        1:   27:	cardEffect(outpost, choice1, choice2, choice3, &testState, handPos, &bonus);
call    0 returned 100%
        1:   28:	printf("--------Testing outpost card----------\n"); 
call    0 returned 100%
        1:   29:	printf("Testing that outpost was incremented...\n");
call    0 returned 100%
        1:   30:	result = testState.outpostPlayed - G.outpostPlayed;
        1:   31:	printf("Expected result: 1, Actual result: %d - ", result);
call    0 returned 100%
        1:   32:	if(result == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   33:	{
        1:   34:		printf("Test passed!\n\n");
call    0 returned 100%
        -:   35:	}
        -:   36:	else
        -:   37:	{
    #####:   38:		printf("Test failed!\n\n");
call    0 never executed
        -:   39:	}
        -:   40:	
        1:   41:	printf("Testing that card was discarded...\n");
call    0 returned 100%
        1:   42:	result = testState.playedCardCount;
        1:   43:	printf("Expected played: 1, Actual played: %d - ", result);
call    0 returned 100%
        1:   44:	if (result == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   45:	{
        1:   46:		printf("Test passed!\n\n");
call    0 returned 100%
        -:   47:	}
        -:   48:	else
        -:   49:	{
    #####:   50:		printf("Test failed!\n\n");
call    0 never executed
        -:   51:	}
        1:   52:	return 0;
        -:   53:}
File 'dominion.c'
Lines executed:40.86% of 558
Branches executed:47.60% of 416
Taken at least once:39.90% of 416
Calls executed:25.81% of 93
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:19
        -:    0:Programs:10
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 482 returned 100% blocks executed 83%
      482:    8:int compare(const void* a, const void* b) {
      482:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      482:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      130:   12:    return -1;
      352:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:
function initializeGame called 16 returned 100% blocks executed 88%
       16:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;			
        -:   44:  //set up random number generator
       16:   45:  SelectStream(1);
call    0 returned 100%
       16:   46:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   47:  
        -:   48:  //check number of players
       16:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
       16:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
      176:   58:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   59:    {
     1760:   60:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   61:        {
     1600:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
        -:   66:        }
        -:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
       16:   74:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   75:    {
       16:   76:      state->supplyCount[curse] = 10;
        -:   77:    }
    #####:   78:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   79:    {
    #####:   80:      state->supplyCount[curse] = 20;
        -:   81:    }
        -:   82:  else
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
       16:   88:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   89:    {
       16:   90:      state->supplyCount[estate] = 8;
       16:   91:      state->supplyCount[duchy] = 8;
       16:   92:      state->supplyCount[province] = 8;
        -:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[estate] = 12;
    #####:   97:      state->supplyCount[duchy] = 12;
    #####:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
       16:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       16:  103:  state->supplyCount[silver] = 40;
       16:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
      336:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  108:    {
     2640:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  110:	{
     2480:  111:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
      160:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  115:		{
       64:  116:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       32:  117:		    state->supplyCount[i] = 8; 
        -:  118:		  }
    #####:  119:		  else{ state->supplyCount[i] = 12; }
        -:  120:		}
        -:  121:	      else
        -:  122:		{
      128:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
      160:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
     2320:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
        -:  131:	}
        -:  132:
        -:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
       48:  139:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  140:    {
       32:  141:      state->deckCount[i] = 0;
      128:  142:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  143:	{
       96:  144:	  state->deck[i][j] = estate;
       96:  145:	  state->deckCount[i]++;
        -:  146:	}
      256:  147:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  148:	{
      224:  149:	  state->deck[i][j] = copper;
      224:  150:	  state->deckCount[i]++;		
        -:  151:	}
        -:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
       48:  155:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  156:    {
       32:  157:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
        -:  161:    }
        -:  162:
        -:  163:  //draw player hands
       48:  164:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
       32:  167:      state->handCount[i] = 0;
       32:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
        -:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
      448:  177:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  178:    {
      432:  179:      state->embargoTokens[i] = 0;
        -:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
       16:  183:  state->outpostPlayed = 0;
       16:  184:  state->phase = 0;
       16:  185:  state->numActions = 1;
       16:  186:  state->numBuys = 1;
       16:  187:  state->playedCardCount = 0;
       16:  188:  state->whoseTurn = 0;
       16:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
       96:  193:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       80:  194:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  195:  }
        -:  196:
       16:  197:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  198:
       16:  199:  return 0;
        -:  200:}
        -:  201:
function shuffle called 44 returned 100% blocks executed 100%
       44:  202:int shuffle(int player, struct gameState *state) {
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
       44:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
       44:  210:  if (state->deckCount[player] < 1)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        6:  211:    return -1;
       38:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
      404:  215:  while (state->deckCount[player] > 0) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
      328:  216:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      328:  217:    newDeck[newDeckPos] = state->deck[player][card];
      328:  218:    newDeckPos++;
     1130:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      802:  220:      state->deck[player][i] = state->deck[player][i+1];
        -:  221:    }
      328:  222:    state->deckCount[player]--;
        -:  223:  }
      366:  224:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
      328:  225:    state->deck[player][i] = newDeck[i];
      328:  226:    state->deckCount[player]++;
        -:  227:  }
        -:  228:
       38:  229:  return 0;
        -:  230:}
        -:  231:
function playCard called 0 returned 0% blocks executed 0%
    #####:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
    #####:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
    #####:  238:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
    #####:  244:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
    #####:  250:  card = handCard(handPos, state);
call    0 never executed
        -:  251:	
        -:  252:  //check if selected card is an action
    #####:  253:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
    #####:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
    #####:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
    #####:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  269:	
    #####:  270:  return 0;
        -:  271:}
        -:  272:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
    #####:  281:  who = state->whoseTurn;
        -:  282:
    #####:  283:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
    #####:  287:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
    #####:  291:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
        -:  295:  } else {
    #####:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
    #####:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  299:  
    #####:  300:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
    #####:  309:  return 0;
        -:  310:}
        -:  311:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  312:int numHandCards(struct gameState *state) {
    #####:  313:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  314:}
        -:  315:
function handCard called 0 returned 0% blocks executed 0%
    #####:  316:int handCard(int handPos, struct gameState *state) {
    #####:  317:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
function supplyCount called 8 returned 100% blocks executed 100%
        8:  321:int supplyCount(int card, struct gameState *state) {
        8:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
function fullDeckCount called 9 returned 100% blocks executed 82%
        9:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
        9:  327:  int count = 0;
        -:  328:
       18:  329:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:  330:    {
        9:  331:      if (state->deck[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  332:    }
        -:  333:
       18:  334:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:  335:    {
        9:  336:      if (state->hand[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  337:    }
        -:  338:
       18:  339:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:  340:    {
        9:  341:      if (state->discard[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  342:    }
        -:  343:
        9:  344:  return count;
        -:  345:}
        -:  346:
function whoseTurn called 14 returned 100% blocks executed 100%
       14:  347:int whoseTurn(struct gameState *state) {
       14:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
    #####:  354:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  355:  
        -:  356:  //Discard hand
    #####:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  360:  }
    #####:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
    #####:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  366:  }
        -:  367:  else{
    #####:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
    #####:  371:  state->outpostPlayed = 0;
    #####:  372:  state->phase = 0;
    #####:  373:  state->numActions = 1;
    #####:  374:  state->coins = 0;
    #####:  375:  state->numBuys = 1;
    #####:  376:  state->playedCardCount = 0;
    #####:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
    #####:  381:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  382:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  383:  }
        -:  384:
        -:  385:  //Update money
    #####:  386:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  387:
    #####:  388:  return 0;
        -:  389:}
        -:  390:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
    #####:  396:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  397:    {
    #####:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
    #####:  402:  j = 0;
    #####:  403:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  404:    {
    #####:  405:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  406:	{
    #####:  407:	  j++;
        -:  408:	}
        -:  409:    }
    #####:  410:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  411:    {
    #####:  412:      return 1;
        -:  413:    }
        -:  414:
    #####:  415:  return 0;
        -:  416:}
        -:  417:
function scoreFor called 18 returned 100% blocks executed 100%
       18:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
       18:  421:  int score = 0;
        -:  422:  //score from hand
       36:  423:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:  424:    {
       18:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       18:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       18:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       18:  428:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       18:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       18:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
call    2 returned 100%
        -:  431:    }
        -:  432:
        -:  433:  //score from discard
       36:  434:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:  435:    {
       18:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       18:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       18:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       18:  439:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       18:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       18:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
call    2 returned 100%
        -:  442:    }
        -:  443:
        -:  444:  //score from deck
       36:  445:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:  446:    {
       18:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       18:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       18:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       18:  450:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       18:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       18:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
call    2 returned 100%
        -:  453:    }
        -:  454:
       18:  455:  return score;
        -:  456:}
        -:  457:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  469:	{
    #####:  470:	  players[i] = -9999;
        -:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  475:	}
        -:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  483:	{
    #####:  484:	  j = i;
        -:  485:	}
        -:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  494:	{
    #####:  495:	  players[i]++;
        -:  496:	}
        -:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  504:	{
    #####:  505:	  j = i;
        -:  506:	}
        -:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  514:	{
    #####:  515:	  players[i] = 1;
        -:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
        -:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
function drawCard called 102 returned 100% blocks executed 100%
      102:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
      102:  529:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
        8:  534:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        4:  535:      state->deck[player][i] = state->discard[player][i];
        4:  536:      state->discard[player][i] = -1;
        -:  537:    }
        -:  538:
        4:  539:    state->deckCount[player] = state->discardCount[player];
        4:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
        4:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
        4:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
        4:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
        4:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
        4:  560:    if (deckCounter == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:  561:      return -1;
        -:  562:
        2:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  564:    state->deckCount[player]--;
        2:  565:    state->handCount[player]++;//Increment hand count
        -:  566:  }
        -:  567:
        -:  568:  else{
       98:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
       98:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
       98:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       98:  577:    state->deckCount[player]--;
       98:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
      100:  581:  return 0;
        -:  582:}
        -:  583:
function getCost called 84 returned 100% blocks executed 100%
       84:  584:int getCost(int cardNumber)
        -:  585:{
       84:  586:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 4%
        -:  587:    {
        -:  588:    case curse:
        3:  589:      return 0;
        -:  590:    case estate:
        3:  591:      return 2;
        -:  592:    case duchy:
        3:  593:      return 5;
        -:  594:    case province:
        3:  595:      return 8;
        -:  596:    case copper:
        3:  597:      return 0;
        -:  598:    case silver:
        3:  599:      return 3;
        -:  600:    case gold:
        3:  601:      return 6;
        -:  602:    case adventurer:
        3:  603:      return 6;
        -:  604:    case council_room:
        3:  605:      return 5;
        -:  606:    case feast:
        3:  607:      return 4;
        -:  608:    case gardens:
        3:  609:      return 4;
        -:  610:    case mine:
        3:  611:      return 5;
        -:  612:    case remodel:
        3:  613:      return 4;
        -:  614:    case smithy:
        3:  615:      return 4;
        -:  616:    case village:
        3:  617:      return 3;
        -:  618:    case baron:
        3:  619:      return 4;
        -:  620:    case great_hall:
        3:  621:      return 3;
        -:  622:    case minion:
        3:  623:      return 5;
        -:  624:    case steward:
        3:  625:      return 3;
        -:  626:    case tribute:
        3:  627:      return 5;
        -:  628:    case ambassador:
        3:  629:      return 3;
        -:  630:    case cutpurse:
        3:  631:      return 4;
        -:  632:    case embargo: 
        3:  633:      return 2;
        -:  634:    case outpost:
        3:  635:      return 5;
        -:  636:    case salvager:
        3:  637:      return 4;
        -:  638:    case sea_hag:
        3:  639:      return 4;
        -:  640:    case treasure_map:
        3:  641:      return 4;
        -:  642:    }
        -:  643:	
        3:  644:  return -1;
        -:  645:}
        -:  646:
function smithyEffect called 2 returned 100% blocks executed 100%
        2:  647:void smithyEffect(int currentPlayer, struct gameState *state, int handPos)
        -:  648:{
        -:  649:	 //+3 Cards
        -:  650:	  int i;
        6:  651:      for (i = 0; i < 2; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  652:	{
        4:  653:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  654:	}
        -:  655:			
        -:  656:      //discard card from hand
        2:  657:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  658:}
function adventurerEffect called 4 returned 100% blocks executed 100%
        4:  659:void adventurerEffect(int *drawntreasure, struct gameState *state, int currentPlayer, int *cardDrawn, int temphand[], int z)
        -:  660:{
       22:  661:	while(*drawntreasure<2){
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
       14:  662:		if (state->deckCount[currentPlayer] < 2){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 57% (fallthrough)
branch  1 taken 43%
        8:  663:		  shuffle(currentPlayer, state);
call    0 returned 100%
        -:  664:		}
       14:  665:		drawCard(currentPlayer, state);
call    0 returned 100%
       14:  666:		*cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       14:  667:		if (*cardDrawn == copper || *cardDrawn == silver || *cardDrawn == gold)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        8:  668:		  *drawntreasure = *drawntreasure + 1;
        -:  669:		else{
        6:  670:		  temphand[z]=*cardDrawn;
        6:  671:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        6:  672:		  z++;
        -:  673:		}
        -:  674:		  }
       14:  675:		  while(z-1>=0){
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        6:  676:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        6:  677:		z=z-1;
        -:  678:		  }
        4:  679:}
function greatHallEffect called 0 returned 0% blocks executed 0%
    #####:  680:void greatHallEffect(int currentPlayer, struct gameState *state, int handPos)
        -:  681:{
        -:  682:      //+1 Card
    #####:  683:      drawCard(currentPlayer, state);
call    0 never executed
        -:  684:			
        -:  685:      //+1 Actions
    #####:  686:      state->numActions = state->numActions + 2;
        -:  687:			
        -:  688:      //discard card from hand
    #####:  689:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  690:}
        -:  691:
function remodelEffect called 0 returned 0% blocks executed 0%
    #####:  692:int remodelEffect(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2)
        -:  693:{
        -:  694:	 int j; 
        -:  695:	 int i;
    #####:  696:	 j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  697:
    #####:  698:     if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  699:	{
    #####:  700:	  return -1;
        -:  701:	}
        -:  702:
    #####:  703:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  704:
        -:  705:      //discard card from hand
    #####:  706:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  707:
        -:  708:      //discard trashed card
    #####:  709:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  710:	{
    #####:  711:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  712:	    {
    #####:  713:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  714:	      break;
        -:  715:	    }
        -:  716:	}
    #####:  717:	return 0;
        -:  718:}
        -:  719:
function councilRoomEffect called 0 returned 0% blocks executed 0%
    #####:  720:void councilRoomEffect(int currentPlayer, struct gameState *state, int handPos)
        -:  721:{
        -:  722:	int i;
        -:  723:	  //+4 Cards
    #####:  724:     for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  725:	{
    #####:  726:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  727:	}
        -:  728:			
        -:  729:      //+1 Buy
    #####:  730:      state->numBuys++;
        -:  731:			
        -:  732:      //Each other player draws a card
    #####:  733:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  734:	{
    #####:  735:	  if ( i == currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  736:	    {
    #####:  737:	      drawCard(i, state);
call    0 never executed
        -:  738:	    }
        -:  739:	}
        -:  740:			
        -:  741:      //put played card in played card pile
    #####:  742:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  743:}
        -:  744:
function cardEffect called 14 returned 100% blocks executed 9%
       14:  745:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  746:{
        -:  747:  int i;
        -:  748:  int j;
        -:  749:  int k;
        -:  750:  int x;
        -:  751:  int index;
       14:  752:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       14:  753:  int nextPlayer = currentPlayer + 1;
        -:  754:
       14:  755:  int tributeRevealedCards[2] = {-1, -1};
        -:  756:  int temphand[MAX_HAND];// moved above the if statement
       14:  757:  int drawntreasure=0;
        -:  758:  int cardDrawn;
       14:  759:  int z = 0;// this is the counter for the temp hand
       14:  760:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  761:    nextPlayer = 0;
        -:  762:  }
        -:  763:  
        -:  764:	
        -:  765:  //uses switch to select card and perform actions
       14:  766:  switch( card ) 
branch  0 taken 29%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 14%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 43%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 14%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
        -:  767:    {
        -:  768:    case adventurer:
        4:  769:      adventurerEffect(&drawntreasure, state, currentPlayer, &cardDrawn, temphand, z);
call    0 returned 100%
        4:  770:      return 0;
        -:  771:			
        -:  772:    case council_room:
    #####:  773:	  councilRoomEffect(currentPlayer, state, handPos);		
call    0 never executed
    #####:  774:      return 0;
        -:  775:			
        -:  776:    case feast:
        -:  777:      //gain card with cost up to 5
        -:  778:      //Backup hand
    #####:  779:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  780:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  781:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  782:      }
        -:  783:      //Backup hand
        -:  784:
        -:  785:      //Update Coins for Buy
    #####:  786:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  787:      x = 1;//Condition to loop on
    #####:  788:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  789:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  790:	  if (DEBUG)
        -:  791:	    printf("None of that card left, sorry!\n");
        -:  792:
        -:  793:	  if (DEBUG){
        -:  794:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  795:	  }
        -:  796:	}
    #####:  797:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  798:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  799:
        -:  800:	  if (DEBUG){
        -:  801:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  802:	  }
        -:  803:	}
        -:  804:	else{
        -:  805:
        -:  806:	  if (DEBUG){
        -:  807:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  808:	  }
        -:  809:
    #####:  810:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  811:	  x = 0;//No more buying cards
        -:  812:
        -:  813:	  if (DEBUG){
        -:  814:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  815:	  }
        -:  816:
        -:  817:	}
        -:  818:      }     
        -:  819:
        -:  820:      //Reset Hand
    #####:  821:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  822:	state->hand[currentPlayer][i] = temphand[i];
    #####:  823:	temphand[i] = -1;
        -:  824:      }
        -:  825:      //Reset Hand
        -:  826:      			
    #####:  827:      return 0;
        -:  828:			
        -:  829:    case gardens:
    #####:  830:      return -1;
        -:  831:			
        -:  832:    case mine:
    #####:  833:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  834:
    #####:  835:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  836:	{
    #####:  837:	  return -1;
        -:  838:	}
        -:  839:		
    #####:  840:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  841:	{
    #####:  842:	  return -1;
        -:  843:	}
        -:  844:
    #####:  845:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  846:	{
    #####:  847:	  return -1;
        -:  848:	}
        -:  849:
    #####:  850:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  851:
        -:  852:      //discard card from hand
    #####:  853:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  854:
        -:  855:      //discard trashed card
    #####:  856:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  857:	{
    #####:  858:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  859:	    {
    #####:  860:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  861:	      break;
        -:  862:	    }
        -:  863:	}			
    #####:  864:      return 0;
        -:  865:			
        -:  866:    case remodel:		
    #####:  867:      return remodelEffect(currentPlayer, state, handPos, choice1, choice2);
call    0 never executed
        -:  868:		
        -:  869:    case smithy:
        -:  870:		//execute smithy effect
        2:  871:		smithyEffect(currentPlayer, state, handPos);
call    0 returned 100%
        2:  872:		return 0;
        -:  873:		
        -:  874:    case baron:
    #####:  875:      state->numBuys++;//Increase buys by 1!
    #####:  876:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  877:	int p = 0;//Iterator for hand!
    #####:  878:	int card_not_discarded = 1;//Flag for discard set!
    #####:  879:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  880:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  881:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  882:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  883:	    state->discardCount[currentPlayer]++;
    #####:  884:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  885:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  886:	    }
    #####:  887:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  888:	    state->handCount[currentPlayer]--;
    #####:  889:	    card_not_discarded = 0;//Exit the loop
        -:  890:	  }
    #####:  891:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  892:	    if(DEBUG) {
        -:  893:	      printf("No estate cards in your hand, invalid choice\n");
        -:  894:	      printf("Must gain an estate if there are any\n");
        -:  895:	    }
    #####:  896:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  897:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  898:	      state->supplyCount[estate]--;//Decrement estates
    #####:  899:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  900:		isGameOver(state);
call    0 never executed
        -:  901:	      }
        -:  902:	    }
    #####:  903:	    card_not_discarded = 0;//Exit the loop
        -:  904:	  }
        -:  905:			    
        -:  906:	  else{
    #####:  907:	    p++;//Next card
        -:  908:	  }
        -:  909:	}
        -:  910:      }
        -:  911:			    
        -:  912:      else{
    #####:  913:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  914:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  915:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  916:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  917:	    isGameOver(state);
call    0 never executed
        -:  918:	  }
        -:  919:	}
        -:  920:      }      
    #####:  921:      return 0;
        -:  922:		
        -:  923:    case great_hall:
    #####:  924:	  greatHallEffect(currentPlayer, state, handPos);	
call    0 never executed
    #####:  925:      return 0;
        -:  926:		
        -:  927:    case minion:
        -:  928:      //+1 action
    #####:  929:      state->numActions++;
        -:  930:			
        -:  931:      //discard card from hand
    #####:  932:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  933:			
    #####:  934:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  935:	{
    #####:  936:	  state->coins = state->coins + 2;
        -:  937:	}
        -:  938:			
    #####:  939:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  940:	{
        -:  941:	  //discard hand
    #####:  942:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  943:	    {
    #####:  944:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  945:	    }
        -:  946:				
        -:  947:	  //draw 4
    #####:  948:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  949:	    {
    #####:  950:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  951:	    }
        -:  952:				
        -:  953:	  //other players discard hand and redraw if hand size > 4
    #####:  954:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  955:	    {
    #####:  956:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  957:		{
    #####:  958:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  959:		    {
        -:  960:		      //discard hand
    #####:  961:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  962:			{
    #####:  963:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  964:			}
        -:  965:							
        -:  966:		      //draw 4
    #####:  967:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  968:			{
    #####:  969:			  drawCard(i, state);
call    0 never executed
        -:  970:			}
        -:  971:		    }
        -:  972:		}
        -:  973:	    }
        -:  974:				
        -:  975:	}
    #####:  976:      return 0;
        -:  977:		
        -:  978:    case steward:
        6:  979:      if (choice1 == 1)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  980:	{
        -:  981:	  //+2 cards
        2:  982:	  drawCard(currentPlayer, state);
call    0 returned 100%
        2:  983:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  984:	}
        4:  985:      else if (choice1 == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  986:	{
        -:  987:	  //+2 coins
        2:  988:	  state->coins = state->coins + 2;
        -:  989:	}
        -:  990:      else
        -:  991:	{
        -:  992:	  //trash 2 cards in hand
        2:  993:	  discardCard(choice2, currentPlayer, state, 1);
call    0 returned 100%
        2:  994:	  discardCard(choice3, currentPlayer, state, 1);
call    0 returned 100%
        -:  995:	}
        -:  996:			
        -:  997:      //discard card from hand
        6:  998:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        6:  999:      return 0;
        -: 1000:		
        -: 1001:    case tribute:
    #####: 1002:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1003:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1004:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1005:	  state->deckCount[nextPlayer]--;
        -: 1006:	}
    #####: 1007:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1008:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1009:	  state->discardCount[nextPlayer]--;
        -: 1010:	}
        -: 1011:	else{
        -: 1012:	  //No Card to Reveal
        -: 1013:	  if (DEBUG){
        -: 1014:	    printf("No cards to reveal\n");
        -: 1015:	  }
        -: 1016:	}
        -: 1017:      }
        -: 1018:	    
        -: 1019:      else{
    #####: 1020:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1021:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1022:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1023:	    state->deckCount[nextPlayer]++;
    #####: 1024:	    state->discard[nextPlayer][i] = -1;
    #####: 1025:	    state->discardCount[nextPlayer]--;
        -: 1026:	  }
        -: 1027:			    
    #####: 1028:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1029:	} 
    #####: 1030:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1031:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1032:	state->deckCount[nextPlayer]--;
    #####: 1033:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1034:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1035:	state->deckCount[nextPlayer]--;
        -: 1036:      }    
        -: 1037:		       
    #####: 1038:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1039:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1040:	state->playedCardCount++;
    #####: 1041:	tributeRevealedCards[1] = -1;
        -: 1042:      }
        -: 1043:
    #####: 1044:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1045:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1046:	  state->coins += 2;
        -: 1047:	}
        -: 1048:		    
    #####: 1049:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1050:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1051:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1052:	}
        -: 1053:	else{//Action Card
    #####: 1054:	  state->numActions = state->numActions + 2;
        -: 1055:	}
        -: 1056:      }
        -: 1057:	    
    #####: 1058:      return 0;
        -: 1059:		
        -: 1060:    case ambassador:
    #####: 1061:      j = 0;		//used to check if player has enough cards to discard
        -: 1062:
    #####: 1063:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1064:	{
    #####: 1065:	  return -1;				
        -: 1066:	}
        -: 1067:
    #####: 1068:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
    #####: 1070:	  return -1;
        -: 1071:	}
        -: 1072:
    #####: 1073:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1074:	{
    #####: 1075:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1076:	    {
    #####: 1077:	      j++;
        -: 1078:	    }
        -: 1079:	}
    #####: 1080:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
        -: 1085:      if (DEBUG) 
        -: 1086:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1087:
        -: 1088:      //increase supply count for choosen card by amount being discarded
    #####: 1089:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1090:			
        -: 1091:      //each other player gains a copy of revealed card
    #####: 1092:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1093:	{
    #####: 1094:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1095:	    {
    #####: 1096:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1097:	    }
        -: 1098:	}
        -: 1099:
        -: 1100:      //discard played card from hand
    #####: 1101:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1102:
        -: 1103:      //trash copies of cards returned to supply
    #####: 1104:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1105:	{
    #####: 1106:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1107:	    {
    #####: 1108:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1109:		{
    #####: 1110:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1111:		  break;
        -: 1112:		}
        -: 1113:	    }
        -: 1114:	}			
        -: 1115:
    #####: 1116:      return 0;
        -: 1117:		
        -: 1118:    case cutpurse:
        -: 1119:
    #####: 1120:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1121:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1124:	    {
    #####: 1125:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1126:		{
    #####: 1127:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1128:		    {
    #####: 1129:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1130:		      break;
        -: 1131:		    }
    #####: 1132:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1133:		    {
    #####: 1134:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1135:			{
        -: 1136:			  if (DEBUG)
        -: 1137:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1138:			}	
    #####: 1139:		      break;
        -: 1140:		    }		
        -: 1141:		}
        -: 1142:					
        -: 1143:	    }
        -: 1144:				
        -: 1145:	}				
        -: 1146:
        -: 1147:      //discard played card from hand
    #####: 1148:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1149:
    #####: 1150:      return 0;
        -: 1151:
        -: 1152:		
        -: 1153:    case embargo: 
        -: 1154:      //+2 Coins
    #####: 1155:      state->coins = state->coins + 2;
        -: 1156:			
        -: 1157:      //see if selected pile is in play
    #####: 1158:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1159:	{
    #####: 1160:	  return -1;
        -: 1161:	}
        -: 1162:			
        -: 1163:      //add embargo token to selected supply pile
    #####: 1164:      state->embargoTokens[choice1]++;
        -: 1165:			
        -: 1166:      //trash card
    #####: 1167:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1168:      return 0;
        -: 1169:		
        -: 1170:    case outpost:
        -: 1171:      //set outpost flag
        2: 1172:      state->outpostPlayed++;
        -: 1173:			
        -: 1174:      //discard card
        2: 1175:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2: 1176:      return 0;
        -: 1177:		
        -: 1178:    case salvager:
        -: 1179:      //+1 buy
    #####: 1180:      state->numBuys++;
        -: 1181:			
    #####: 1182:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1183:	{
        -: 1184:	  //gain coins equal to trashed card
    #####: 1185:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1186:	  //trash card
    #####: 1187:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1188:	}
        -: 1189:			
        -: 1190:      //discard card
    #####: 1191:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1192:      return 0;
        -: 1193:		
        -: 1194:    case sea_hag:
    #####: 1195:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1196:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1197:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1198:	  state->discardCount[i]++;
    #####: 1199:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1200:	}
        -: 1201:      }
    #####: 1202:      return 0;
        -: 1203:		
        -: 1204:    case treasure_map:
        -: 1205:      //search hand for another treasure_map
    #####: 1206:      index = -1;
    #####: 1207:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1208:	{
    #####: 1209:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1210:	    {
    #####: 1211:	      index = i;
    #####: 1212:	      break;
        -: 1213:	    }
        -: 1214:	}
    #####: 1215:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1216:	{
        -: 1217:	  //trash both treasure cards
    #####: 1218:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1219:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1220:
        -: 1221:	  //gain 4 Gold cards
    #####: 1222:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1223:	    {
    #####: 1224:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1225:	    }
        -: 1226:				
        -: 1227:	  //return success
    #####: 1228:	  return 1;
        -: 1229:	}
        -: 1230:			
        -: 1231:      //no second treasure_map found in hand
    #####: 1232:      return -1;
        -: 1233:    }
        -: 1234:	
    #####: 1235:  return -1;
        -: 1236:}
        -: 1237:
function discardCard called 14 returned 100% blocks executed 78%
       14: 1238:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1239:{
        -: 1240:	
        -: 1241:  //if card is not trashed, added to Played pile 
       14: 1242:  if (trashFlag < 1)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        -: 1243:    {
        -: 1244:      //add card to played pile
       10: 1245:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       10: 1246:      state->playedCardCount++;
        -: 1247:    }
        -: 1248:	
        -: 1249:  //set played card to -1
       14: 1250:  state->hand[currentPlayer][handPos] = -1;
        -: 1251:	
        -: 1252:  //remove card from player's hand
       14: 1253:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1254:    {
        -: 1255:      //reduce number of cards in hand
    #####: 1256:      state->handCount[currentPlayer]--;
        -: 1257:    }
       14: 1258:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1259:    {
        -: 1260:      //reduce number of cards in hand
    #####: 1261:      state->handCount[currentPlayer]--;
        -: 1262:    }
        -: 1263:  else 	
        -: 1264:    {
        -: 1265:      //replace discarded card with last card in hand
       14: 1266:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1267:      //set last card to -1
       14: 1268:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1269:      //reduce number of cards in hand
       14: 1270:      state->handCount[currentPlayer]--;
        -: 1271:    }
        -: 1272:	
       14: 1273:  return 0;
        -: 1274:}
        -: 1275:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1276:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1277:{
        -: 1278:  //Note: supplyPos is enum of choosen card
        -: 1279:	
        -: 1280:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1281:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1282:    {
    #####: 1283:      return -1;
        -: 1284:    }
        -: 1285:	
        -: 1286:  //added card for [whoseTurn] current player:
        -: 1287:  // toFlag = 0 : add to discard
        -: 1288:  // toFlag = 1 : add to deck
        -: 1289:  // toFlag = 2 : add to hand
        -: 1290:
    #####: 1291:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1292:    {
    #####: 1293:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1294:      state->deckCount[player]++;
        -: 1295:    }
    #####: 1296:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1297:    {
    #####: 1298:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1299:      state->handCount[player]++;
        -: 1300:    }
        -: 1301:  else
        -: 1302:    {
    #####: 1303:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1304:      state->discardCount[player]++;
        -: 1305:    }
        -: 1306:	
        -: 1307:  //decrease number in supply pile
    #####: 1308:  state->supplyCount[supplyPos]--;
        -: 1309:	 
    #####: 1310:  return 0;
        -: 1311:}
        -: 1312:
function updateCoins called 31 returned 100% blocks executed 100%
       31: 1313:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1314:{
        -: 1315:  int i;
        -: 1316:	
        -: 1317:  //reset coin count
       31: 1318:  state->coins = 0;
        -: 1319:
        -: 1320:  //add coins for each Treasure card in player's hand
      186: 1321:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1322:    {
      155: 1323:      if (state->hand[player][i] == copper)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
        -: 1324:	{
       79: 1325:	  state->coins += 1;
        -: 1326:	}
       76: 1327:      else if (state->hand[player][i] == silver)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -: 1328:	{
       15: 1329:	  state->coins += 2;
        -: 1330:	}
       61: 1331:      else if (state->hand[player][i] == gold)
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
        -: 1332:	{
       30: 1333:	  state->coins += 3;
        -: 1334:	}	
        -: 1335:    }	
        -: 1336:
        -: 1337:  //add bonus
       31: 1338:  state->coins += bonus;
        -: 1339:
       31: 1340:  return 0;
        -: 1341:}
        -: 1342:
        -: 1343:
        -: 1344://end of dominion.c
        -: 1345:
