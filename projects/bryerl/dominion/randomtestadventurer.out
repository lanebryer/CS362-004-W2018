Random testing for adventurer card.....
Test 1 failed.  Expected 0 drawn cards.  Actually drew -493 cards
Test 12 failed.  Expected 0 drawn cards.  Actually drew -84 cards
Test 31 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 82 failed.  Expected 0 drawn cards.  Actually drew -13 cards
Test 86 failed.  Expected 0 drawn cards.  Actually drew -17 cards
Test 100 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 151 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 159 failed.  Expected 0 drawn cards.  Actually drew -491 cards
Test 199 failed.  Expected 0 drawn cards.  Actually drew -8 cards
Test 236 failed.  Expected 0 drawn cards.  Actually drew -6 cards
Test 246 failed.  Expected 0 drawn cards.  Actually drew -8 cards
Test 256 failed.  Expected 0 drawn cards.  Actually drew -6 cards
Test 257 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 301 failed.  Expected 0 drawn cards.  Actually drew -9 cards
Test 312 failed.  Expected 0 drawn cards.  Actually drew -19 cards
Test 315 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 323 failed.  Expected 0 drawn cards.  Actually drew -15 cards
Test 335 failed.  Expected 0 drawn cards.  Actually drew -23 cards
Test 353 failed.  Expected 0 drawn cards.  Actually drew -7 cards
Test 373 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 385 failed.  Expected 0 drawn cards.  Actually drew -460 cards
Test 402 failed.  Expected 0 drawn cards.  Actually drew -9 cards
Test 406 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 417 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 421 failed.  Expected 0 drawn cards.  Actually drew -11 cards
Test 427 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 436 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 444 failed.  Expected 0 drawn cards.  Actually drew -16 cards
Test 459 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 476 failed.  Expected 0 drawn cards.  Actually drew -5 cards
Test 492 failed.  Expected 0 drawn cards.  Actually drew -8 cards
Test 505 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 511 failed.  Expected 0 drawn cards.  Actually drew -483 cards
Test 525 failed.  Expected 0 drawn cards.  Actually drew -5 cards
Test 526 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 537 failed.  Expected 0 drawn cards.  Actually drew -494 cards
Test 547 failed.  Expected 0 drawn cards.  Actually drew -10 cards
Test 552 failed.  Expected 0 drawn cards.  Actually drew -482 cards
Test 580 failed.  Expected 0 drawn cards.  Actually drew -5 cards
Test 585 failed.  Expected 0 drawn cards.  Actually drew -7 cards
Test 607 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 624 failed.  Expected 0 drawn cards.  Actually drew -13 cards
Test 635 failed.  Expected 0 drawn cards.  Actually drew -19 cards
Test 637 failed.  Expected 0 drawn cards.  Actually drew -10 cards
Test 644 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 653 failed.  Expected 0 drawn cards.  Actually drew -8 cards
Test 679 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 684 failed.  Expected 0 drawn cards.  Actually drew -483 cards
Test 693 failed.  Expected 0 drawn cards.  Actually drew -5 cards
Test 701 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 707 failed.  Expected 0 drawn cards.  Actually drew -5 cards
Test 720 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 729 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 747 failed.  Expected 0 drawn cards.  Actually drew -9 cards
Test 815 failed.  Expected 0 drawn cards.  Actually drew -485 cards
Test 852 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 870 failed.  Expected 0 drawn cards.  Actually drew -16 cards
Test 873 failed.  Expected 0 drawn cards.  Actually drew -7 cards
Test 882 failed.  Expected 0 drawn cards.  Actually drew -6 cards
Test 884 failed.  Expected 0 drawn cards.  Actually drew -5 cards
Test 891 failed.  Expected 0 drawn cards.  Actually drew -470 cards
Test 894 failed.  Expected 0 drawn cards.  Actually drew -486 cards
Test 898 failed.  Expected 0 drawn cards.  Actually drew -20 cards
Test 899 failed.  Expected 0 drawn cards.  Actually drew -486 cards
Test 912 failed.  Expected 0 drawn cards.  Actually drew -11 cards
Test 928 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 936 failed.  Expected 0 drawn cards.  Actually drew -486 cards
Test 939 failed.  Expected 0 drawn cards.  Actually drew -6 cards
Test 948 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 950 failed.  Expected 0 drawn cards.  Actually drew -9 cards
Test 956 failed.  Expected 0 drawn cards.  Actually drew -10 cards
Test 962 failed.  Expected 0 drawn cards.  Actually drew -499 cards
Test 972 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 974 failed.  Expected 0 drawn cards.  Actually drew -10 cards
Test 993 failed.  Expected 0 drawn cards.  Actually drew -24 cards
Test 998 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 1002 failed.  Expected 0 drawn cards.  Actually drew -491 cards
Test 1007 failed.  Expected 0 drawn cards.  Actually drew -488 cards
Test 1048 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 1061 failed.  Expected 0 drawn cards.  Actually drew -5 cards
Test 1078 failed.  Expected 0 drawn cards.  Actually drew -5 cards
Test 1102 failed.  Expected 0 drawn cards.  Actually drew -487 cards
Test 1121 failed.  Expected 0 drawn cards.  Actually drew -5 cards
Test 1128 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 1130 failed.  Expected 0 drawn cards.  Actually drew -5 cards
Test 1145 failed.  Expected 0 drawn cards.  Actually drew -89 cards
Test 1150 failed.  Expected 0 drawn cards.  Actually drew -7 cards
Test 1161 failed.  Expected 0 drawn cards.  Actually drew -476 cards
Test 1194 failed.  Expected 0 drawn cards.  Actually drew -11 cards
Test 1196 failed.  Expected 0 drawn cards.  Actually drew -476 cards
Test 1204 failed.  Expected 0 drawn cards.  Actually drew -5 cards
Test 1219 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 1278 failed.  Expected 0 drawn cards.  Actually drew -11 cards
Test 1313 failed.  Expected 0 drawn cards.  Actually drew -8 cards
Test 1315 failed.  Expected 0 drawn cards.  Actually drew -471 cards
Test 1326 failed.  Expected 0 drawn cards.  Actually drew -486 cards
Test 1330 failed.  Expected 0 drawn cards.  Actually drew -12 cards
Test 1332 failed.  Expected 0 drawn cards.  Actually drew -7 cards
Test 1344 failed.  Expected 0 drawn cards.  Actually drew -7 cards
Test 1353 failed.  Expected 0 drawn cards.  Actually drew -466 cards
Test 1371 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 1373 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 1376 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 1391 failed.  Expected 0 drawn cards.  Actually drew -480 cards
Test 1394 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 1417 failed.  Expected 0 drawn cards.  Actually drew -13 cards
Test 1423 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 1455 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 1457 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 1476 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 1478 failed.  Expected 0 drawn cards.  Actually drew -18 cards
Test 1479 failed.  Expected 0 drawn cards.  Actually drew -7 cards
Test 1546 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 1555 failed.  Expected 0 drawn cards.  Actually drew -22 cards
Test 1567 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 1582 failed.  Expected 0 drawn cards.  Actually drew -14 cards
Test 1598 failed.  Expected 0 drawn cards.  Actually drew -471 cards
Test 1608 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 1620 failed.  Expected 0 drawn cards.  Actually drew -7 cards
Test 1662 failed.  Expected 0 drawn cards.  Actually drew -472 cards
Test 1672 failed.  Expected 0 drawn cards.  Actually drew -17 cards
Test 1674 failed.  Expected 0 drawn cards.  Actually drew -17 cards
Test 1678 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 1683 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 1685 failed.  Expected 0 drawn cards.  Actually drew -11 cards
Test 1690 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 1704 failed.  Expected 0 drawn cards.  Actually drew -494 cards
Test 1725 failed.  Expected 0 drawn cards.  Actually drew -6 cards
Test 1740 failed.  Expected 0 drawn cards.  Actually drew -13 cards
Test 1757 failed.  Expected 0 drawn cards.  Actually drew -6 cards
Test 1778 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 1805 failed.  Expected 0 drawn cards.  Actually drew -27 cards
Test 1811 failed.  Expected 0 drawn cards.  Actually drew -6 cards
Test 1813 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 1826 failed.  Expected 0 drawn cards.  Actually drew -77 cards
Test 1836 failed.  Expected 0 drawn cards.  Actually drew -476 cards
Test 1841 failed.  Expected 0 drawn cards.  Actually drew -5 cards
Test 1866 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 1877 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 1882 failed.  Expected 0 drawn cards.  Actually drew -5 cards
Test 1883 failed.  Expected 0 drawn cards.  Actually drew -7 cards
Test 1896 failed.  Expected 0 drawn cards.  Actually drew -10 cards
Test 1918 failed.  Expected 0 drawn cards.  Actually drew -7 cards
Test 1929 failed.  Expected 0 drawn cards.  Actually drew -15 cards
Test 1948 failed.  Expected 0 drawn cards.  Actually drew -8 cards
Test 1956 failed.  Expected 0 drawn cards.  Actually drew -487 cards
Test 1963 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 1986 failed.  Expected 0 drawn cards.  Actually drew -479 cards
Test 2042 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 2065 failed.  Expected 0 drawn cards.  Actually drew -8 cards
Test 2074 failed.  Expected 0 drawn cards.  Actually drew -9 cards
Test 2086 failed.  Expected 0 drawn cards.  Actually drew -14 cards
Test 2089 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 2114 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 2116 failed.  Expected 0 drawn cards.  Actually drew -496 cards
Test 2160 failed.  Expected 0 drawn cards.  Actually drew -9 cards
Test 2168 failed.  Expected 0 drawn cards.  Actually drew -5 cards
Test 2191 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 2194 failed.  Expected 0 drawn cards.  Actually drew -7 cards
Test 2207 failed.  Expected 0 drawn cards.  Actually drew -21 cards
Test 2222 failed.  Expected 0 drawn cards.  Actually drew -9 cards
Test 2228 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 2240 failed.  Expected 0 drawn cards.  Actually drew -13 cards
Test 2252 failed.  Expected 0 drawn cards.  Actually drew -19 cards
Test 2272 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 2274 failed.  Expected 0 drawn cards.  Actually drew -483 cards
Test 2317 failed.  Expected 0 drawn cards.  Actually drew -10 cards
Test 2363 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 2364 failed.  Expected 0 drawn cards.  Actually drew -484 cards
Test 2368 failed.  Expected 0 drawn cards.  Actually drew -77 cards
Test 2383 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 2390 failed.  Expected 0 drawn cards.  Actually drew -10 cards
Test 2407 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 2411 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 2424 failed.  Expected 0 drawn cards.  Actually drew -8 cards
Test 2432 failed.  Expected 0 drawn cards.  Actually drew -483 cards
Test 2467 failed.  Expected 0 drawn cards.  Actually drew -493 cards
Test 2475 failed.  Expected 0 drawn cards.  Actually drew -23 cards
Test 2483 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 2499 failed.  Expected 0 drawn cards.  Actually drew -491 cards
Test 2516 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 2542 failed.  Expected 0 drawn cards.  Actually drew -480 cards
Test 2552 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 2630 failed.  Expected 0 drawn cards.  Actually drew -489 cards
Test 2635 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 2647 failed.  Expected 0 drawn cards.  Actually drew -15 cards
Test 2649 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 2671 failed.  Expected 0 drawn cards.  Actually drew -5 cards
Test 2693 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 2706 failed.  Expected 0 drawn cards.  Actually drew -496 cards
Test 2714 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 2722 failed.  Expected 0 drawn cards.  Actually drew -16 cards
Test 2725 failed.  Expected 0 drawn cards.  Actually drew -471 cards
Test 2729 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 2793 failed.  Expected 0 drawn cards.  Actually drew -11 cards
Test 2805 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 2818 failed.  Expected 0 drawn cards.  Actually drew -19 cards
Test 2834 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 2837 failed.  Expected 0 drawn cards.  Actually drew -20 cards
Test 2854 failed.  Expected 0 drawn cards.  Actually drew -470 cards
Test 2869 failed.  Expected 0 drawn cards.  Actually drew -5 cards
Test 2872 failed.  Expected 0 drawn cards.  Actually drew -10 cards
Test 2881 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 2882 failed.  Expected 0 drawn cards.  Actually drew -11 cards
Test 2915 failed.  Expected 0 drawn cards.  Actually drew -9 cards
Test 2919 failed.  Expected 0 drawn cards.  Actually drew -7 cards
Test 2938 failed.  Expected 0 drawn cards.  Actually drew -7 cards
Test 2941 failed.  Expected 0 drawn cards.  Actually drew -10 cards
Test 2960 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 2967 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 2969 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 3005 failed.  Expected 0 drawn cards.  Actually drew -5 cards
Test 3008 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 3025 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 3030 failed.  Expected 0 drawn cards.  Actually drew -5 cards
Test 3041 failed.  Expected 0 drawn cards.  Actually drew -6 cards
Test 3059 failed.  Expected 0 drawn cards.  Actually drew -8 cards
Test 3107 failed.  Expected 0 drawn cards.  Actually drew -6 cards
Test 3122 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 3142 failed.  Expected 0 drawn cards.  Actually drew -487 cards
Test 3148 failed.  Expected 0 drawn cards.  Actually drew -6 cards
Test 3150 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 3164 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 3172 failed.  Expected 0 drawn cards.  Actually drew -484 cards
Test 3181 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 3264 failed.  Expected 0 drawn cards.  Actually drew -491 cards
Test 3267 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 3324 failed.  Expected 0 drawn cards.  Actually drew -5 cards
Test 3341 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 3342 failed.  Expected 0 drawn cards.  Actually drew -9 cards
Test 3356 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 3374 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 3389 failed.  Expected 0 drawn cards.  Actually drew -90 cards
Test 3392 failed.  Expected 0 drawn cards.  Actually drew -14 cards
Test 3399 failed.  Expected 0 drawn cards.  Actually drew -481 cards
Test 3400 failed.  Expected 0 drawn cards.  Actually drew -5 cards
Test 3410 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 3425 failed.  Expected 0 drawn cards.  Actually drew -5 cards
Test 3434 failed.  Expected 0 drawn cards.  Actually drew -9 cards
Test 3448 failed.  Expected 0 drawn cards.  Actually drew -7 cards
Test 3484 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 3490 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 3498 failed.  Expected 0 drawn cards.  Actually drew -493 cards
Test 3507 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 3508 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 3531 failed.  Expected 0 drawn cards.  Actually drew -10 cards
Test 3536 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 3558 failed.  Expected 0 drawn cards.  Actually drew -479 cards
Test 3583 failed.  Expected 0 drawn cards.  Actually drew -477 cards
Test 3588 failed.  Expected 0 drawn cards.  Actually drew -7 cards
Test 3601 failed.  Expected 0 drawn cards.  Actually drew -458 cards
Test 3609 failed.  Expected 0 drawn cards.  Actually drew -90 cards
Test 3630 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 3646 failed.  Expected 0 drawn cards.  Actually drew -477 cards
Test 3663 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 3673 failed.  Expected 0 drawn cards.  Actually drew -14 cards
Test 3684 failed.  Expected 0 drawn cards.  Actually drew -13 cards
Test 3688 failed.  Expected 0 drawn cards.  Actually drew -482 cards
Test 3695 failed.  Expected 0 drawn cards.  Actually drew -477 cards
Test 3701 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 3717 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 3727 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 3752 failed.  Expected 0 drawn cards.  Actually drew -16 cards
Test 3758 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 3763 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 3765 failed.  Expected 0 drawn cards.  Actually drew -19 cards
Test 3778 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 3821 failed.  Expected 0 drawn cards.  Actually drew -7 cards
Test 3836 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 3847 failed.  Expected 0 drawn cards.  Actually drew -12 cards
Test 3865 failed.  Expected 0 drawn cards.  Actually drew -7 cards
Test 3870 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 3877 failed.  Expected 0 drawn cards.  Actually drew -7 cards
Test 3903 failed.  Expected 0 drawn cards.  Actually drew -493 cards
Test 3904 failed.  Expected 0 drawn cards.  Actually drew -6 cards
Test 3924 failed.  Expected 0 drawn cards.  Actually drew -19 cards
Test 3941 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 3958 failed.  Expected 0 drawn cards.  Actually drew -490 cards
Test 3998 failed.  Expected 0 drawn cards.  Actually drew -9 cards
Test 4000 failed.  Expected 0 drawn cards.  Actually drew -459 cards
Test 4013 failed.  Expected 0 drawn cards.  Actually drew -7 cards
Test 4018 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 4031 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 4042 failed.  Expected 0 drawn cards.  Actually drew -5 cards
Test 4069 failed.  Expected 0 drawn cards.  Actually drew -478 cards
Test 4071 failed.  Expected 0 drawn cards.  Actually drew -15 cards
Test 4082 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 4099 failed.  Expected 0 drawn cards.  Actually drew -7 cards
Test 4117 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 4148 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 4181 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 4217 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 4224 failed.  Expected 0 drawn cards.  Actually drew -11 cards
Test 4234 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 4238 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 4239 failed.  Expected 0 drawn cards.  Actually drew -26 cards
Test 4243 failed.  Expected 0 drawn cards.  Actually drew -5 cards
Test 4252 failed.  Expected 0 drawn cards.  Actually drew -7 cards
Test 4264 failed.  Expected 0 drawn cards.  Actually drew -11 cards
Test 4294 failed.  Expected 0 drawn cards.  Actually drew -487 cards
Test 4301 failed.  Expected 0 drawn cards.  Actually drew -22 cards
Test 4320 failed.  Expected 0 drawn cards.  Actually drew -27 cards
Test 4336 failed.  Expected 0 drawn cards.  Actually drew -5 cards
Test 4342 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 4355 failed.  Expected 0 drawn cards.  Actually drew -7 cards
Test 4362 failed.  Expected 0 drawn cards.  Actually drew -13 cards
Test 4373 failed.  Expected 0 drawn cards.  Actually drew -6 cards
Test 4375 failed.  Expected 0 drawn cards.  Actually drew -5 cards
Test 4391 failed.  Expected 0 drawn cards.  Actually drew -5 cards
Test 4430 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 4432 failed.  Expected 0 drawn cards.  Actually drew -80 cards
Test 4455 failed.  Expected 0 drawn cards.  Actually drew -15 cards
Test 4465 failed.  Expected 0 drawn cards.  Actually drew -498 cards
Test 4480 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 4486 failed.  Expected 0 drawn cards.  Actually drew -7 cards
Test 4489 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 4509 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 4519 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 4542 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 4553 failed.  Expected 0 drawn cards.  Actually drew -472 cards
Test 4561 failed.  Expected 0 drawn cards.  Actually drew -9 cards
Test 4575 failed.  Expected 0 drawn cards.  Actually drew -489 cards
Test 4602 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 4606 failed.  Expected 0 drawn cards.  Actually drew -6 cards
Test 4639 failed.  Expected 0 drawn cards.  Actually drew -13 cards
Test 4642 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 4643 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 4654 failed.  Expected 0 drawn cards.  Actually drew -470 cards
Test 4660 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 4685 failed.  Expected 0 drawn cards.  Actually drew -9 cards
Test 4741 failed.  Expected 0 drawn cards.  Actually drew -81 cards
Test 4749 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 4770 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 4795 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 4805 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 4807 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 4809 failed.  Expected 0 drawn cards.  Actually drew -3 cards
Test 4811 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 4827 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 4860 failed.  Expected 0 drawn cards.  Actually drew -7 cards
Test 4877 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 4888 failed.  Expected 0 drawn cards.  Actually drew -2 cards
Test 4892 failed.  Expected 0 drawn cards.  Actually drew -12 cards
Test 4895 failed.  Expected 0 drawn cards.  Actually drew -4 cards
Test 4896 failed.  Expected 0 drawn cards.  Actually drew -12 cards
Test 4923 failed.  Expected 0 drawn cards.  Actually drew -1 cards
Test 4942 failed.  Expected 0 drawn cards.  Actually drew -10 cards
Test 4962 failed.  Expected 0 drawn cards.  Actually drew -5 cards
Test 4965 failed.  Expected 0 drawn cards.  Actually drew -8 cards
Tests passed: 4651, tests failed: 349
Function 'updateCoins'
Lines executed:100.00% of 11
No branches
No calls

Function 'gainCard'
Lines executed:61.54% of 13
No branches
No calls

Function 'discardCard'
Lines executed:92.31% of 13
No branches
No calls

Function 'cardEffect'
Lines executed:11.56% of 199
No branches
No calls

Function 'councilRoomEffect'
Lines executed:0.00% of 9
No branches
No calls

Function 'remodelEffect'
Lines executed:0.00% of 11
No branches
No calls

Function 'greatHallEffect'
Lines executed:0.00% of 5
No branches
No calls

Function 'adventurerEffect'
Lines executed:100.00% of 18
No branches
No calls

Function 'smithyEffect'
Lines executed:100.00% of 5
No branches
No calls

Function 'getCost'
Lines executed:23.33% of 30
No branches
No calls

Function 'drawCard'
Lines executed:100.00% of 22
No branches
No calls

Function 'getWinners'
Lines executed:0.00% of 24
No branches
No calls

Function 'scoreFor'
Lines executed:100.00% of 24
No branches
No calls

Function 'isGameOver'
Lines executed:80.00% of 10
No branches
No calls

Function 'endTurn'
Lines executed:100.00% of 20
No branches
No calls

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
No branches
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
No calls

Function 'numHandCards'
Lines executed:100.00% of 2
No branches
No calls

Function 'buyCard'
Lines executed:76.92% of 13
No branches
No calls

Function 'playCard'
Lines executed:78.57% of 14
No branches
No calls

Function 'shuffle'
Lines executed:100.00% of 16
No branches
No calls

Function 'initializeGame'
Lines executed:95.16% of 62
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
No branches
No calls

File 'dominion.c'
Lines executed:48.30% of 559
Branches executed:53.73% of 415
Taken at least once:37.35% of 415
Calls executed:37.23% of 94
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:4
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 538972 returned 100% blocks executed 100%
   538972:    8:int compare(const void* a, const void* b) {
   538972:    8-block  0
   538972:    9:  if (*(int*)a > *(int*)b)
   538972:    9-block  0
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
    68002:   10:    return 1;
    68002:   10-block  0
   470970:   11:  if (*(int*)a < *(int*)b)
   470970:   11-block  0
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
   159902:   12:    return -1;
   159902:   12-block  0
   311068:   13:  return 0;
   311068:   13-block  0
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
        -:   35:}
        -:   36:
        -:   37:
function initializeGame called 9001 returned 100% blocks executed 95%
     9001:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
     9001:   38-block  0
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;			
        -:   44:  //set up random number generator
     9001:   45:  SelectStream(1);
     9001:   45-block  0
call    0 returned 100%
     9001:   46:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   47:  
        -:   48:  //check number of players
     9001:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     9001:   49-block  0
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   50:    {
    #####:   51:      return -1;
    $$$$$:   51-block  0
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
     9001:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
    99011:   58:  for (i = 0; i < 10; i++)
     9001:   58-block  0
    90010:   58-block  1
    99011:   58-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   59:    {
   990110:   60:      for (j = 0; j < 10; j++)
    90010:   60-block  0
   900100:   60-block  1
   990110:   60-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   61:        {
   900100:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
   900100:   62-block  0
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
   810090:   62-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   63:	    {
    #####:   64:	      return -1;
    $$$$$:   64-block  0
        -:   65:	    }
        -:   66:        }
        -:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
     9001:   74:  if (numPlayers == 2)
     9001:   74-block  0
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   75:    {
     2972:   76:      state->supplyCount[curse] = 10;
     2972:   76-block  0
        -:   77:    }
     6029:   78:  else if (numPlayers == 3)
     6029:   78-block  0
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   79:    {
     2994:   80:      state->supplyCount[curse] = 20;
     2994:   80-block  0
        -:   81:    }
        -:   82:  else
        -:   83:    {
     3035:   84:      state->supplyCount[curse] = 30;
     3035:   84-block  0
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
     9001:   88:  if (numPlayers == 2)
     9001:   88-block  0
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   89:    {
     2972:   90:      state->supplyCount[estate] = 8;
     2972:   91:      state->supplyCount[duchy] = 8;
     2972:   92:      state->supplyCount[province] = 8;
     2972:   92-block  0
        -:   93:    }
        -:   94:  else
        -:   95:    {
     6029:   96:      state->supplyCount[estate] = 12;
     6029:   97:      state->supplyCount[duchy] = 12;
     6029:   98:      state->supplyCount[province] = 12;
     6029:   98-block  0
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
     9001:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     9001:  103:  state->supplyCount[silver] = 40;
     9001:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
   189021:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
     9001:  107-block  0
   180020:  107-block  1
   189021:  107-block  2
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  108:    {
  1485165:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
   180020:  109-block  0
  1305145:  109-block  1
  1485165:  109-block  2
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  110:	{
  1395155:  111:	  if (kingdomCards[j] == i)
  1395155:  111-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
    90010:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
    90010:  114-block  0
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
    81010:  114-block  1
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  115:		{
    36002:  116:		  if (numPlayers == 2){ 
    18001:  116-block  0
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
    18001:  116-block  1
     5943:  117:		    state->supplyCount[i] = 8; 
     5943:  117-block  0
        -:  118:		  }
    12058:  119:		  else{ state->supplyCount[i] = 12; }
    12058:  119-block  0
        -:  120:		}
        -:  121:	      else
        -:  122:		{
    72009:  123:		  state->supplyCount[i] = 10;
    72009:  123-block  0
        -:  124:		}
    90010:  125:	      break;
    90010:  125-block  0
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
  1305145:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
        -:  131:	}
        -:  132:
        -:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
    36067:  139:  for (i = 0; i < numPlayers; i++)
     9001:  139-block  0
    27066:  139-block  1
    36067:  139-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  140:    {
    27066:  141:      state->deckCount[i] = 0;
   108264:  142:      for (j = 0; j < 3; j++)
    27066:  142-block  0
    81198:  142-block  1
   108264:  142-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  143:	{
    81198:  144:	  state->deck[i][j] = estate;
    81198:  145:	  state->deckCount[i]++;
        -:  146:	}
   216528:  147:      for (j = 3; j < 10; j++)
    27066:  147-block  0
   189462:  147-block  1
   216528:  147-block  2
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  148:	{
   189462:  149:	  state->deck[i][j] = copper;
   189462:  150:	  state->deckCount[i]++;		
        -:  151:	}
        -:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
    36067:  155:  for (i = 0; i < numPlayers; i++)
     9001:  155-block  0
    27066:  155-block  1
    36067:  155-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  156:    {
    27066:  157:      if ( shuffle(i, state) < 0 )
    27066:  157-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  158:	{
    #####:  159:	  return -1;
    $$$$$:  159-block  0
        -:  160:	}
        -:  161:    }
        -:  162:
        -:  163:  //draw player hands
    36067:  164:  for (i = 0; i < numPlayers; i++)
     9001:  164-block  0
    27066:  164-block  1
    36067:  164-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
    27066:  167:      state->handCount[i] = 0;
    27066:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
        -:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
   252028:  177:  for (i = 0; i <= treasure_map; i++)
     9001:  177-block  0
   243027:  177-block  1
   252028:  177-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  178:    {
   243027:  179:      state->embargoTokens[i] = 0;
        -:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
     9001:  183:  state->outpostPlayed = 0;
     9001:  184:  state->phase = 0;
     9001:  185:  state->numActions = 1;
     9001:  186:  state->numBuys = 1;
     9001:  187:  state->playedCardCount = 0;
     9001:  188:  state->whoseTurn = 0;
     9001:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
    54006:  193:  for (it = 0; it < 5; it++){
     9001:  193-block  0
    54006:  193-block  1
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    45005:  194:    drawCard(state->whoseTurn, state);
    45005:  194-block  0
call    0 returned 100%
        -:  195:  }
        -:  196:
     9001:  197:  updateCoins(state->whoseTurn, state, 0);
     9001:  197-block  0
call    0 returned 100%
        -:  198:
     9001:  199:  return 0;
        -:  200:}
        -:  201:
function shuffle called 101575 returned 100% blocks executed 100%
   101575:  202:int shuffle(int player, struct gameState *state) {
   101575:  202-block  0
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
   101575:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
   101575:  210:  if (state->deckCount[player] < 1)
   101575:  210-block  0
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
    67706:  211:    return -1;
    67706:  211-block  0
    33869:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
    33869:  212-block  0
call    0 returned 100%
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
   351694:  215:  while (state->deckCount[player] > 0) {
   351694:  215-block  0
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
   317825:  216:    card = floor(Random() * state->deckCount[player]);
   317825:  216-block  0
call    0 returned 100%
   317825:  217:    newDeck[newDeckPos] = state->deck[player][card];
   317825:  218:    newDeckPos++;
  1178459:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
   860634:  219-block  0
  1178459:  219-block  1
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
   860634:  220:      state->deck[player][i] = state->deck[player][i+1];
        -:  221:    }
   317825:  222:    state->deckCount[player]--;
   317825:  222-block  0
        -:  223:  }
   351694:  224:  for (i = 0; i < newDeckPos; i++) {
    33869:  224-block  0
   317825:  224-block  1
   351694:  224-block  2
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
   317825:  225:    state->deck[player][i] = newDeck[i];
   317825:  226:    state->deckCount[player]++;
        -:  227:  }
        -:  228:
   101575:  229:  return 0;
    33869:  229-block  0
   101575:  229-block  1
        -:  230:}
        -:  231:
function playCard called 41 returned 100% blocks executed 80%
       41:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
       41:  232-block  0
        -:  233:{	
        -:  234:  int card;
       41:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
       41:  238:  if (state->phase != 0)
       41:  238-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  239:    {
    #####:  240:      return -1;
    $$$$$:  240-block  0
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
       41:  244:  if ( state->numActions < 1 )
       41:  244-block  0
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -:  245:    {
       33:  246:      return -1;
       33:  246-block  0
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
        8:  250:  card = handCard(handPos, state);
        8:  250-block  0
call    0 returned 100%
        -:  251:	
        -:  252:  //check if selected card is an action
        8:  253:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        8:  253-block  0
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  254:    {
    #####:  255:      return -1;
    $$$$$:  255-block  0
        -:  256:    }
        -:  257:	
        -:  258:  //play card
        8:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        8:  259-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  260:    {
    #####:  261:      return -1;
    $$$$$:  261-block  0
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
        8:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
        8:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        8:  268-block  0
call    0 returned 100%
        -:  269:	
       41:  270:  return 0;
       41:  270-block  0
        -:  271:}
        -:  272:
function buyCard called 33 returned 100% blocks executed 79%
       66:  273:int buyCard(int supplyPos, struct gameState *state) {
       33:  273-block  0
       33:  273-block  1
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
       33:  281:  who = state->whoseTurn;
        -:  282:
       33:  283:  if (state->numBuys < 1){
       33:  283-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
    $$$$$:  286-block  0
       33:  287:  } else if (supplyCount(supplyPos, state) <1){
       33:  287-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
    $$$$$:  290-block  0
       33:  291:  } else if (state->coins < getCost(supplyPos)){
       33:  291-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
    $$$$$:  294-block  0
        -:  295:  } else {
       33:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
       33:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
       33:  298-block  0
call    0 returned 100%
        -:  299:  
       33:  300:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
       33:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
       33:  309:  return 0;
       33:  309-block  0
        -:  310:}
        -:  311:
function numHandCards called 266 returned 100% blocks executed 100%
      266:  312:int numHandCards(struct gameState *state) {
      266:  312-block  0
      266:  313:  return state->handCount[ whoseTurn(state) ];
      266:  313-block  0
call    0 returned 100%
        -:  314:}
        -:  315:
function handCard called 524 returned 100% blocks executed 100%
      524:  316:int handCard(int handPos, struct gameState *state) {
      524:  316-block  0
      524:  317:  int currentPlayer = whoseTurn(state);
      524:  317-block  0
call    0 returned 100%
      524:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
function supplyCount called 66 returned 100% blocks executed 100%
       66:  321:int supplyCount(int card, struct gameState *state) {
       66:  321-block  0
       66:  322:  return state->supplyCount[card];
       66:  322-block  0
        -:  323:}
        -:  324:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  325:int fullDeckCount(int player, int card, struct gameState *state) {
    $$$$$:  325-block  0
        -:  326:  int i;
    #####:  327:  int count = 0;
        -:  328:
    #####:  329:  for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  329-block  0
    $$$$$:  329-block  1
    $$$$$:  329-block  2
branch  0 never executed
branch  1 never executed
        -:  330:    {
    #####:  331:      if (state->deck[player][i] == card) count++;
    $$$$$:  331-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  331-block  1
        -:  332:    }
        -:  333:
    #####:  334:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  334-block  0
    $$$$$:  334-block  1
    $$$$$:  334-block  2
branch  0 never executed
branch  1 never executed
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
    $$$$$:  336-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  336-block  1
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  339-block  0
    $$$$$:  339-block  1
    $$$$$:  339-block  2
branch  0 never executed
branch  1 never executed
        -:  340:    {
    #####:  341:      if (state->discard[player][i] == card) count++;
    $$$$$:  341-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  341-block  1
        -:  342:    }
        -:  343:
    #####:  344:  return count;
    $$$$$:  344-block  0
        -:  345:}
        -:  346:
function whoseTurn called 23872 returned 100% blocks executed 100%
    23872:  347:int whoseTurn(struct gameState *state) {
    23872:  347-block  0
    23872:  348:  return state->whoseTurn;
    23872:  348-block  0
        -:  349:}
        -:  350:
function endTurn called 34 returned 100% blocks executed 100%
       34:  351:int endTurn(struct gameState *state) {
       34:  351-block  0
        -:  352:  int k;
        -:  353:  int i;
       34:  354:  int currentPlayer = whoseTurn(state);
       34:  354-block  0
call    0 returned 100%
        -:  355:  
        -:  356:  //Discard hand
      218:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      184:  357-block  0
      218:  357-block  1
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
      184:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      184:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  360:  }
       34:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
       34:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
       34:  364-block  0
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
       17:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       17:  365-block  0
        -:  366:  }
        -:  367:  else{
       17:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
       17:  368-block  0
        -:  369:  }
        -:  370:
       34:  371:  state->outpostPlayed = 0;
       34:  372:  state->phase = 0;
       34:  373:  state->numActions = 1;
       34:  374:  state->coins = 0;
       34:  375:  state->numBuys = 1;
       34:  376:  state->playedCardCount = 0;
       34:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
      204:  381:  for (k = 0; k < 5; k++){
       34:  381-block  0
      204:  381-block  1
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      170:  382:    drawCard(state->whoseTurn, state);//Draw a card
      170:  382-block  0
call    0 returned 100%
        -:  383:  }
        -:  384:
        -:  385:  //Update money
       34:  386:  updateCoins(state->whoseTurn, state , 0);
       34:  386-block  0
call    0 returned 100%
        -:  387:
       34:  388:  return 0;
        -:  389:}
        -:  390:
function isGameOver called 35 returned 100% blocks executed 82%
       35:  391:int isGameOver(struct gameState *state) {
       35:  391-block  0
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
       35:  396:  if (state->supplyCount[province] == 0)
       35:  396-block  0
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  397:    {
        1:  398:      return 1;
        1:  398-block  0
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
       34:  402:  j = 0;
      884:  403:  for (i = 0; i < 25; i++)
       34:  403-block  0
      850:  403-block  1
      884:  403-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  404:    {
      850:  405:      if (state->supplyCount[i] == 0)
      850:  405-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  406:	{
    #####:  407:	  j++;
    $$$$$:  407-block  0
        -:  408:	}
        -:  409:    }
       34:  410:  if ( j >= 3)
       34:  410-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  411:    {
    #####:  412:      return 1;
    $$$$$:  412-block  0
        -:  413:    }
        -:  414:
       34:  415:  return 0;
       34:  415-block  0
        -:  416:}
        -:  417:
function scoreFor called 2 returned 100% blocks executed 70%
        2:  418:int scoreFor (int player, struct gameState *state) {
        2:  418-block  0
        -:  419:
        -:  420:  int i;
        2:  421:  int score = 0;
        -:  422:  //score from hand
        7:  423:  for (i = 0; i < state->handCount[player]; i++)
        2:  423-block  0
        5:  423-block  1
        7:  423-block  2
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  424:    {
        5:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
        5:  425-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    $$$$$:  425-block  1
        5:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
        5:  426-block  0
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        1:  426-block  1
        5:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
        5:  427-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    $$$$$:  427-block  1
        5:  428:      if (state->hand[player][i] == province) { score = score + 6; };
        5:  428-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    $$$$$:  428-block  1
        5:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
        5:  429-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    $$$$$:  429-block  1
        5:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        5:  430-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    $$$$$:  430-block  1
call    2 never executed
        -:  431:    }
        -:  432:
        -:  433:  //score from discard
       43:  434:  for (i = 0; i < state->discardCount[player]; i++)
        2:  434-block  0
       41:  434-block  1
       43:  434-block  2
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  435:    {
       41:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
       41:  436-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    $$$$$:  436-block  1
       41:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
       41:  437-block  0
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        4:  437-block  1
       41:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
       41:  438-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    $$$$$:  438-block  1
       41:  439:      if (state->discard[player][i] == province) { score = score + 6; };
       41:  439-block  0
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
        6:  439-block  1
       41:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       41:  440-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    $$$$$:  440-block  1
       41:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       41:  441-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    $$$$$:  441-block  1
call    2 never executed
        -:  442:    }
        -:  443:
        -:  444:  //score from deck
       43:  445:  for (i = 0; i < state->discardCount[player]; i++)
        2:  445-block  0
       41:  445-block  1
       43:  445-block  2
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  446:    {
       41:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
       41:  447-block  0
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        2:  447-block  1
       41:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
       41:  448-block  0
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        4:  448-block  1
       41:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
       41:  449-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    $$$$$:  449-block  1
       41:  450:      if (state->deck[player][i] == province) { score = score + 6; };
       41:  450-block  0
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        4:  450-block  1
       41:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       41:  451-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    $$$$$:  451-block  1
       41:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       41:  452-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    $$$$$:  452-block  1
call    2 never executed
        -:  453:    }
        -:  454:
        2:  455:  return score;
        2:  455-block  0
        -:  456:}
        -:  457:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  458-block  0
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  465-block  0
    $$$$$:  465-block  1
    $$$$$:  465-block  2
branch  0 never executed
branch  1 never executed
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
    $$$$$:  468-block  0
branch  0 never executed
branch  1 never executed
        -:  469:	{
    #####:  470:	  players[i] = -9999;
    $$$$$:  470-block  0
        -:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
    $$$$$:  474-block  0
call    0 never executed
        -:  475:	}
        -:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  480-block  0
    $$$$$:  480-block  1
    $$$$$:  480-block  2
branch  0 never executed
branch  1 never executed
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
    $$$$$:  482-block  0
branch  0 never executed
branch  1 never executed
        -:  483:	{
    #####:  484:	  j = i;
    $$$$$:  484-block  0
        -:  485:	}
        -:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
    $$$$$:  490-block  0
call    0 never executed
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  491-block  0
    $$$$$:  491-block  1
branch  0 never executed
branch  1 never executed
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  493-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  493-block  1
branch  2 never executed
branch  3 never executed
        -:  494:	{
    #####:  495:	  players[i]++;
    $$$$$:  495-block  0
        -:  496:	}
        -:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  501-block  0
    $$$$$:  501-block  1
    $$$$$:  501-block  2
branch  0 never executed
branch  1 never executed
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
    $$$$$:  503-block  0
branch  0 never executed
branch  1 never executed
        -:  504:	{
    #####:  505:	  j = i;
    $$$$$:  505-block  0
        -:  506:	}
        -:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  511-block  0
    $$$$$:  511-block  1
    $$$$$:  511-block  2
branch  0 never executed
branch  1 never executed
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
    $$$$$:  513-block  0
branch  0 never executed
branch  1 never executed
        -:  514:	{
    #####:  515:	  players[i] = 1;
    $$$$$:  515-block  0
        -:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
    $$$$$:  519-block  0
        -:  520:	}
        -:  521:    }
        -:  522:
    #####:  523:  return 0;
    $$$$$:  523-block  0
        -:  524:}
        -:  525:
function drawCard called 160233 returned 100% blocks executed 100%
   160233:  526:int drawCard(int player, struct gameState *state)
   160233:  526-block  0
        -:  527:{	int count;
        -:  528:  int deckCounter;
   160233:  529:  if (state->deckCount[player] <= 0){//Deck is empty
   160233:  529-block  0
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
    78420:  534:    for (i = 0; i < state->discardCount[player];i++){
    35266:  534-block  0
    43154:  534-block  1
    78420:  534-block  2
branch  0 taken 55%
branch  1 taken 45% (fallthrough)
    43154:  535:      state->deck[player][i] = state->discard[player][i];
    43154:  536:      state->discard[player][i] = -1;
        -:  537:    }
        -:  538:
    35266:  539:    state->deckCount[player] = state->discardCount[player];
    35266:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
    35266:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
    35266:  543-block  0
call    0 returned 100%
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
    35266:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
    35266:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
    35266:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
    35266:  560:    if (deckCounter == 0)
    35266:  560-block  0
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
    32474:  561:      return -1;
    32474:  561-block  0
        -:  562:
     2792:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     2792:  564:    state->deckCount[player]--;
     2792:  565:    state->handCount[player]++;//Increment hand count
     2792:  565-block  0
        -:  566:  }
        -:  567:
        -:  568:  else{
   124967:  569:    int count = state->handCount[player];//Get current hand count for player
   124967:  569-block  0
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
   124967:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
   124967:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   124967:  577:    state->deckCount[player]--;
   124967:  578:    state->handCount[player]++;//Increment hand count
   124967:  578-block  0
        -:  579:  }
        -:  580:
   127759:  581:  return 0;
   127759:  581-block  0
        -:  582:}
        -:  583:
function getCost called 66 returned 100% blocks executed 23%
       66:  584:int getCost(int cardNumber)
       66:  584-block  0
        -:  585:{
       66:  586:  switch( cardNumber ) 
       66:  586-block  0
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 24%
branch  4 taken 0%
branch  5 taken 42%
branch  6 taken 21%
branch  7 taken 6%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 6%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  587:    {
        -:  588:    case curse:
    #####:  589:      return 0;
    $$$$$:  589-block  0
        -:  590:    case estate:
    #####:  591:      return 2;
    $$$$$:  591-block  0
        -:  592:    case duchy:
    #####:  593:      return 5;
    $$$$$:  593-block  0
        -:  594:    case province:
       16:  595:      return 8;
       16:  595-block  0
        -:  596:    case copper:
    #####:  597:      return 0;
    $$$$$:  597-block  0
        -:  598:    case silver:
       28:  599:      return 3;
       28:  599-block  0
        -:  600:    case gold:
       14:  601:      return 6;
       14:  601-block  0
        -:  602:    case adventurer:
        4:  603:      return 6;
        4:  603-block  0
        -:  604:    case council_room:
    #####:  605:      return 5;
    $$$$$:  605-block  0
        -:  606:    case feast:
    #####:  607:      return 4;
    $$$$$:  607-block  0
        -:  608:    case gardens:
    #####:  609:      return 4;
    $$$$$:  609-block  0
        -:  610:    case mine:
    #####:  611:      return 5;
    $$$$$:  611-block  0
        -:  612:    case remodel:
    #####:  613:      return 4;
    $$$$$:  613-block  0
        -:  614:    case smithy:
        4:  615:      return 4;
        4:  615-block  0
        -:  616:    case village:
    #####:  617:      return 3;
    $$$$$:  617-block  0
        -:  618:    case baron:
    #####:  619:      return 4;
    $$$$$:  619-block  0
        -:  620:    case great_hall:
    #####:  621:      return 3;
    $$$$$:  621-block  0
        -:  622:    case minion:
    #####:  623:      return 5;
    $$$$$:  623-block  0
        -:  624:    case steward:
    #####:  625:      return 3;
    $$$$$:  625-block  0
        -:  626:    case tribute:
    #####:  627:      return 5;
    $$$$$:  627-block  0
        -:  628:    case ambassador:
    #####:  629:      return 3;
    $$$$$:  629-block  0
        -:  630:    case cutpurse:
    #####:  631:      return 4;
    $$$$$:  631-block  0
        -:  632:    case embargo: 
    #####:  633:      return 2;
    $$$$$:  633-block  0
        -:  634:    case outpost:
    #####:  635:      return 5;
    $$$$$:  635-block  0
        -:  636:    case salvager:
    #####:  637:      return 4;
    $$$$$:  637-block  0
        -:  638:    case sea_hag:
    #####:  639:      return 4;
    $$$$$:  639-block  0
        -:  640:    case treasure_map:
    #####:  641:      return 4;
    $$$$$:  641-block  0
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
    $$$$$:  644-block  0
        -:  645:}
        -:  646:
function smithyEffect called 2 returned 100% blocks executed 100%
        2:  647:void smithyEffect(int currentPlayer, struct gameState *state, int handPos)
        2:  647-block  0
        -:  648:{
        -:  649:	 //+3 Cards
        -:  650:	  int i;
        6:  651:      for (i = 0; i < 2; i++)
        2:  651-block  0
        6:  651-block  1
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  652:	{
        4:  653:	  drawCard(currentPlayer, state);
        4:  653-block  0
call    0 returned 100%
        -:  654:	}
        -:  655:			
        -:  656:      //discard card from hand
        2:  657:      discardCard(handPos, currentPlayer, state, 0);
        2:  657-block  0
call    0 returned 100%
        2:  658:}
function adventurerEffect called 5006 returned 100% blocks executed 100%
     5006:  659:void adventurerEffect(struct gameState *state)
     5006:  659-block  0
        -:  660:{
        -:  661:	int cardDrawn;
     5006:  662:	int drawnTreasure = 0;
     5006:  663:	int z = 0;
        -:  664:	int tempHand[MAX_HAND];
     5006:  665:	int currentPlayer = whoseTurn(state);
     5006:  665-block  0
call    0 returned 100%
        -:  666:	
   118788:  667:	while(drawnTreasure < 2){
   118788:  667-block  0
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
   113782:  668:		if (state->deckCount[currentPlayer] < 2){//if the deck is empty we need to shuffle discard and add to deck
   113782:  668-block  0
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
    39243:  669:		  shuffle(currentPlayer, state);
    39243:  669-block  0
call    0 returned 100%
        -:  670:		}
   113782:  671:		drawCard(currentPlayer, state);
   113782:  671-block  0
call    0 returned 100%
   113782:  672:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   113782:  673:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
   110347:  673-block  0
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
   107052:  673-block  1
branch  4 taken 3% (fallthrough)
branch  5 taken 97%
    10012:  674:		  drawnTreasure = drawnTreasure + 1;
    10012:  674-block  0
        -:  675:		else{
   103770:  676:		  tempHand[z]=cardDrawn;
   103770:  677:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   103770:  678:		  z++;
   103770:  678-block  0
        -:  679:		}
        -:  680:		  }
    95249:  681:		  while(z-1>=0){
     5006:  681-block  0
    95249:  681-block  1
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
    90243:  682:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=tempHand[z-1]; // discard all cards in play that have been drawn
    90243:  683:		z=z-1;
    90243:  683-block  0
        -:  684:		  }
     5006:  685:}
function greatHallEffect called 0 returned 0% blocks executed 0%
    #####:  686:void greatHallEffect(int currentPlayer, struct gameState *state, int handPos)
    $$$$$:  686-block  0
        -:  687:{
        -:  688:      //+1 Card
    #####:  689:      drawCard(currentPlayer, state);
    $$$$$:  689-block  0
call    0 never executed
        -:  690:			
        -:  691:      //+1 Actions
    #####:  692:      state->numActions = state->numActions + 2;
        -:  693:			
        -:  694:      //discard card from hand
    #####:  695:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  696:}
        -:  697:
function remodelEffect called 0 returned 0% blocks executed 0%
    #####:  698:int remodelEffect(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2)
    $$$$$:  698-block  0
        -:  699:{
        -:  700:	 int j; 
        -:  701:	 int i;
    #####:  702:	 j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  703:
    #####:  704:     if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  704-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  705:	{
    #####:  706:	  return -1;
    $$$$$:  706-block  0
        -:  707:	}
        -:  708:
    #####:  709:      gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  709-block  0
call    0 never executed
        -:  710:
        -:  711:      //discard card from hand
    #####:  712:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  713:
        -:  714:      //discard trashed card
    #####:  715:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  715-block  0
    $$$$$:  715-block  1
branch  0 never executed
branch  1 never executed
        -:  716:	{
    #####:  717:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  717-block  0
branch  0 never executed
branch  1 never executed
        -:  718:	    {
    #####:  719:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  719-block  0
call    0 never executed
    #####:  720:	      break;
        -:  721:	    }
        -:  722:	}
    #####:  723:	return 0;
    $$$$$:  723-block  0
        -:  724:}
        -:  725:
function councilRoomEffect called 0 returned 0% blocks executed 0%
    #####:  726:void councilRoomEffect(int currentPlayer, struct gameState *state, int handPos)
    $$$$$:  726-block  0
        -:  727:{
        -:  728:	int i;
        -:  729:	  //+4 Cards
    #####:  730:     for (i = 0; i < 4; i++)
    $$$$$:  730-block  0
    $$$$$:  730-block  1
branch  0 never executed
branch  1 never executed
        -:  731:	{
    #####:  732:	  drawCard(currentPlayer, state);
    $$$$$:  732-block  0
call    0 never executed
        -:  733:	}
        -:  734:			
        -:  735:      //+1 Buy
    #####:  736:      state->numBuys++;
        -:  737:			
        -:  738:      //Each other player draws a card
    #####:  739:      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  739-block  0
    $$$$$:  739-block  1
    $$$$$:  739-block  2
branch  0 never executed
branch  1 never executed
        -:  740:	{
    #####:  741:	  if ( i == currentPlayer )
    $$$$$:  741-block  0
branch  0 never executed
branch  1 never executed
        -:  742:	    {
    #####:  743:	      drawCard(i, state);
    $$$$$:  743-block  0
call    0 never executed
        -:  744:	    }
        -:  745:	}
        -:  746:			
        -:  747:      //put played card in played card pile
    #####:  748:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  748-block  0
call    0 never executed
    #####:  749:}
        -:  750:
function cardEffect called 9008 returned 100% blocks executed 9%
     9008:  751:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
     9008:  751-block  0
        -:  752:{
        -:  753:  int i;
        -:  754:  int j;
        -:  755:  int k;
        -:  756:  int x;
        -:  757:  int index;
     9008:  758:  int currentPlayer = whoseTurn(state);
     9008:  758-block  0
call    0 returned 100%
     9008:  759:  int nextPlayer = currentPlayer + 1;
        -:  760:
     9008:  761:  int tributeRevealedCards[2] = {-1, -1};
        -:  762:  int temphand[MAX_HAND];// moved above the if statement
     9008:  763:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
     3271:  764:    nextPlayer = 0;
     3271:  764-block  0
        -:  765:  }
        -:  766:  
        -:  767:	
        -:  768:  //uses switch to select card and perform actions
     9008:  769:  switch( card ) 
     9008:  769-block  0
branch  0 taken 56%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 1%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 22%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 22%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
        -:  770:    {
        -:  771:    case adventurer:
     5006:  772:      adventurerEffect(state);
     5006:  772-block  0
call    0 returned 100%
     5006:  773:      return 0;
        -:  774:			
        -:  775:    case council_room:
    #####:  776:	  councilRoomEffect(currentPlayer, state, handPos);		
    $$$$$:  776-block  0
call    0 never executed
    #####:  777:      return 0;
        -:  778:			
        -:  779:    case feast:
        -:  780:      //gain card with cost up to 5
        -:  781:      //Backup hand
    #####:  782:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  782-block  0
    $$$$$:  782-block  1
    $$$$$:  782-block  2
branch  0 never executed
branch  1 never executed
    #####:  783:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  784:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  785:      }
        -:  786:      //Backup hand
        -:  787:
        -:  788:      //Update Coins for Buy
    #####:  789:      updateCoins(currentPlayer, state, 5);
    $$$$$:  789-block  0
call    0 never executed
    #####:  790:      x = 1;//Condition to loop on
    #####:  791:      while( x == 1) {//Buy one card
    $$$$$:  791-block  0
branch  0 never executed
branch  1 never executed
    #####:  792:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  792-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  793:	  if (DEBUG)
        -:  794:	    printf("None of that card left, sorry!\n");
        -:  795:
        -:  796:	  if (DEBUG){
        -:  797:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  798:	  }
        -:  799:	}
    #####:  800:	else if (state->coins < getCost(choice1)){
    $$$$$:  800-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  801:	  printf("That card is too expensive!\n");
    $$$$$:  801-block  0
call    0 never executed
        -:  802:
        -:  803:	  if (DEBUG){
        -:  804:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  805:	  }
        -:  806:	}
        -:  807:	else{
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  811:	  }
        -:  812:
    #####:  813:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  813-block  0
call    0 never executed
    #####:  814:	  x = 0;//No more buying cards
        -:  815:
        -:  816:	  if (DEBUG){
        -:  817:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  818:	  }
        -:  819:
        -:  820:	}
        -:  821:      }     
        -:  822:
        -:  823:      //Reset Hand
    #####:  824:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  824-block  0
    $$$$$:  824-block  1
    $$$$$:  824-block  2
branch  0 never executed
branch  1 never executed
    #####:  825:	state->hand[currentPlayer][i] = temphand[i];
    #####:  826:	temphand[i] = -1;
        -:  827:      }
        -:  828:      //Reset Hand
        -:  829:      			
    #####:  830:      return 0;
    $$$$$:  830-block  0
        -:  831:			
        -:  832:    case gardens:
    #####:  833:      return -1;
    $$$$$:  833-block  0
        -:  834:			
        -:  835:    case mine:
    #####:  836:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  837:
    #####:  838:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  838-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  838-block  1
branch  2 never executed
branch  3 never executed
        -:  839:	{
    #####:  840:	  return -1;
    $$$$$:  840-block  0
        -:  841:	}
        -:  842:		
    #####:  843:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  843-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  843-block  1
branch  2 never executed
branch  3 never executed
        -:  844:	{
    #####:  845:	  return -1;
    $$$$$:  845-block  0
        -:  846:	}
        -:  847:
    #####:  848:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  848-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  849:	{
    #####:  850:	  return -1;
    $$$$$:  850-block  0
        -:  851:	}
        -:  852:
    #####:  853:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  853-block  0
call    0 never executed
        -:  854:
        -:  855:      //discard card from hand
    #####:  856:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  857:
        -:  858:      //discard trashed card
    #####:  859:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  859-block  0
    $$$$$:  859-block  1
branch  0 never executed
branch  1 never executed
        -:  860:	{
    #####:  861:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  861-block  0
branch  0 never executed
branch  1 never executed
        -:  862:	    {
    #####:  863:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  863-block  0
call    0 never executed
    #####:  864:	      break;
        -:  865:	    }
        -:  866:	}			
    #####:  867:      return 0;
    $$$$$:  867-block  0
        -:  868:			
        -:  869:    case remodel:		
    #####:  870:      return remodelEffect(currentPlayer, state, handPos, choice1, choice2);
    $$$$$:  870-block  0
call    0 never executed
        -:  871:		
        -:  872:    case smithy:
        -:  873:		//execute smithy effect
        2:  874:		smithyEffect(currentPlayer, state, handPos);
        2:  874-block  0
call    0 returned 100%
        2:  875:		return 0;
        -:  876:		
        -:  877:    case baron:
    #####:  878:      state->numBuys++;//Increase buys by 1!
    #####:  879:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  879-block  0
branch  0 never executed
branch  1 never executed
    #####:  880:	int p = 0;//Iterator for hand!
    #####:  881:	int card_not_discarded = 1;//Flag for discard set!
    #####:  882:	while(card_not_discarded){
    $$$$$:  882-block  0
    $$$$$:  882-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  882-block  2
    #####:  883:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  883-block  0
branch  0 never executed
branch  1 never executed
    #####:  884:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  885:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  886:	    state->discardCount[currentPlayer]++;
    #####:  887:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  887-block  0
    $$$$$:  887-block  1
    $$$$$:  887-block  2
branch  0 never executed
branch  1 never executed
    #####:  888:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  889:	    }
    #####:  890:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  891:	    state->handCount[currentPlayer]--;
    #####:  892:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  892-block  0
        -:  893:	  }
    #####:  894:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  894-block  0
branch  0 never executed
branch  1 never executed
        -:  895:	    if(DEBUG) {
        -:  896:	      printf("No estate cards in your hand, invalid choice\n");
        -:  897:	      printf("Must gain an estate if there are any\n");
        -:  898:	    }
    #####:  899:	    if (supplyCount(estate, state) > 0){
    $$$$$:  899-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  900:	      gainCard(estate, state, 0, currentPlayer);
    $$$$$:  900-block  0
call    0 never executed
    #####:  901:	      state->supplyCount[estate]--;//Decrement estates
    #####:  902:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  903:		isGameOver(state);
    $$$$$:  903-block  0
call    0 never executed
        -:  904:	      }
        -:  905:	    }
    #####:  906:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  906-block  0
        -:  907:	  }
        -:  908:			    
        -:  909:	  else{
    #####:  910:	    p++;//Next card
    $$$$$:  910-block  0
        -:  911:	  }
        -:  912:	}
        -:  913:      }
        -:  914:			    
        -:  915:      else{
    #####:  916:	if (supplyCount(estate, state) > 0){
    $$$$$:  916-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  917:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  917-block  0
call    0 never executed
    #####:  918:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  919:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  920:	    isGameOver(state);
    $$$$$:  920-block  0
call    0 never executed
        -:  921:	  }
        -:  922:	}
        -:  923:      }      
    #####:  924:      return 0;
    $$$$$:  924-block  0
        -:  925:		
        -:  926:    case great_hall:
    #####:  927:	  greatHallEffect(currentPlayer, state, handPos);	
    $$$$$:  927-block  0
call    0 never executed
    #####:  928:      return 0;
        -:  929:		
        -:  930:    case minion:
        -:  931:      //+1 action
    #####:  932:      state->numActions++;
        -:  933:			
        -:  934:      //discard card from hand
    #####:  935:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  935-block  0
call    0 never executed
        -:  936:			
    #####:  937:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  938:	{
    #####:  939:	  state->coins = state->coins + 2;
    $$$$$:  939-block  0
        -:  940:	}
        -:  941:			
    #####:  942:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  942-block  0
branch  0 never executed
branch  1 never executed
        -:  943:	{
        -:  944:	  //discard hand
    #####:  945:	  while(numHandCards(state) > 0)
    $$$$$:  945-block  0
    $$$$$:  945-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  946:	    {
    #####:  947:	      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  947-block  0
call    0 never executed
        -:  948:	    }
        -:  949:				
        -:  950:	  //draw 4
    #####:  951:	  for (i = 0; i < 4; i++)
    $$$$$:  951-block  0
    $$$$$:  951-block  1
branch  0 never executed
branch  1 never executed
        -:  952:	    {
    #####:  953:	      drawCard(currentPlayer, state);
    $$$$$:  953-block  0
call    0 never executed
        -:  954:	    }
        -:  955:				
        -:  956:	  //other players discard hand and redraw if hand size > 4
    #####:  957:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$:  957-block  0
    $$$$$:  957-block  1
    $$$$$:  957-block  2
branch  0 never executed
branch  1 never executed
        -:  958:	    {
    #####:  959:	      if (i != currentPlayer)
    $$$$$:  959-block  0
branch  0 never executed
branch  1 never executed
        -:  960:		{
    #####:  961:		  if ( state->handCount[i] > 4 )
    $$$$$:  961-block  0
branch  0 never executed
branch  1 never executed
        -:  962:		    {
        -:  963:		      //discard hand
    #####:  964:		      while( state->handCount[i] > 0 )
    $$$$$:  964-block  0
    $$$$$:  964-block  1
branch  0 never executed
branch  1 never executed
        -:  965:			{
    #####:  966:			  discardCard(handPos, i, state, 0);
    $$$$$:  966-block  0
call    0 never executed
        -:  967:			}
        -:  968:							
        -:  969:		      //draw 4
    #####:  970:		      for (j = 0; j < 4; j++)
    $$$$$:  970-block  0
    $$$$$:  970-block  1
branch  0 never executed
branch  1 never executed
        -:  971:			{
    #####:  972:			  drawCard(i, state);
    $$$$$:  972-block  0
call    0 never executed
        -:  973:			}
        -:  974:		    }
        -:  975:		}
        -:  976:	    }
        -:  977:				
        -:  978:	}
    #####:  979:      return 0;
    $$$$$:  979-block  0
        -:  980:		
        -:  981:    case steward:
     2000:  982:      if (choice1 == 1)
     2000:  982-block  0
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
        -:  983:	{
        -:  984:	  //+2 cards
      636:  985:	  drawCard(currentPlayer, state);
      636:  985-block  0
call    0 returned 100%
      636:  986:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  987:	}
     1364:  988:      else if (choice1 == 2)
     1364:  988-block  0
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
        -:  989:	{
        -:  990:	  //+2 coins
      664:  991:	  state->coins = state->coins + 2;
      664:  991-block  0
        -:  992:	}
        -:  993:      else
        -:  994:	{
        -:  995:	  //trash 2 cards in hand
      700:  996:	  discardCard(choice2, currentPlayer, state, 1);
      700:  996-block  0
call    0 returned 100%
      700:  997:	  discardCard(choice3, currentPlayer, state, 1);
call    0 returned 100%
        -:  998:	}
        -:  999:			
        -: 1000:      //discard card from hand
     2000: 1001:      discardCard(handPos, currentPlayer, state, 0);
     2000: 1001-block  0
call    0 returned 100%
     2000: 1002:      return 0;
        -: 1003:		
        -: 1004:    case tribute:
    #####: 1005:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1005-block  0
branch  0 never executed
branch  1 never executed
    #####: 1006:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1006-block  0
branch  0 never executed
branch  1 never executed
    #####: 1007:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1008:	  state->deckCount[nextPlayer]--;
    $$$$$: 1008-block  0
        -: 1009:	}
    #####: 1010:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1010-block  0
branch  0 never executed
branch  1 never executed
    #####: 1011:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1012:	  state->discardCount[nextPlayer]--;
    $$$$$: 1012-block  0
        -: 1013:	}
        -: 1014:	else{
        -: 1015:	  //No Card to Reveal
        -: 1016:	  if (DEBUG){
        -: 1017:	    printf("No cards to reveal\n");
        -: 1018:	  }
        -: 1019:	}
        -: 1020:      }
        -: 1021:	    
        -: 1022:      else{
    #####: 1023:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1023-block  0
branch  0 never executed
branch  1 never executed
    #####: 1024:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1024-block  0
    $$$$$: 1024-block  1
    $$$$$: 1024-block  2
branch  0 never executed
branch  1 never executed
    #####: 1025:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1026:	    state->deckCount[nextPlayer]++;
    #####: 1027:	    state->discard[nextPlayer][i] = -1;
    #####: 1028:	    state->discardCount[nextPlayer]--;
        -: 1029:	  }
        -: 1030:			    
    #####: 1031:	  shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1031-block  0
call    0 never executed
        -: 1032:	} 
    #####: 1033:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1034:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1035:	state->deckCount[nextPlayer]--;
    #####: 1036:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1037:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1038:	state->deckCount[nextPlayer]--;
    $$$$$: 1038-block  0
        -: 1039:      }    
        -: 1040:		       
    #####: 1041:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1041-block  0
branch  0 never executed
branch  1 never executed
    #####: 1042:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1043:	state->playedCardCount++;
    #####: 1044:	tributeRevealedCards[1] = -1;
    $$$$$: 1044-block  0
        -: 1045:      }
        -: 1046:
    #####: 1047:      for (i = 0; i <= 2; i ++){
    $$$$$: 1047-block  0
    $$$$$: 1047-block  1
    $$$$$: 1047-block  2
branch  0 never executed
branch  1 never executed
    #####: 1048:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1048-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1048-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1048-block  2
branch  4 never executed
branch  5 never executed
    #####: 1049:	  state->coins += 2;
    $$$$$: 1049-block  0
        -: 1050:	}
        -: 1051:		    
    #####: 1052:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1052-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1052-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1052-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1052-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1052-block  4
branch  8 never executed
branch  9 never executed
    #####: 1053:	  drawCard(currentPlayer, state);
    $$$$$: 1053-block  0
call    0 never executed
    #####: 1054:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1055:	}
        -: 1056:	else{//Action Card
    #####: 1057:	  state->numActions = state->numActions + 2;
    $$$$$: 1057-block  0
        -: 1058:	}
        -: 1059:      }
        -: 1060:	    
    #####: 1061:      return 0;
    $$$$$: 1061-block  0
        -: 1062:		
        -: 1063:    case ambassador:
    #####: 1064:      j = 0;		//used to check if player has enough cards to discard
        -: 1065:
    #####: 1066:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1066-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1066-block  1
branch  2 never executed
branch  3 never executed
        -: 1067:	{
    #####: 1068:	  return -1;				
    $$$$$: 1068-block  0
        -: 1069:	}
        -: 1070:
    #####: 1071:      if (choice1 == handPos)
    $$$$$: 1071-block  0
branch  0 never executed
branch  1 never executed
        -: 1072:	{
    #####: 1073:	  return -1;
    $$$$$: 1073-block  0
        -: 1074:	}
        -: 1075:
    #####: 1076:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1076-block  0
    $$$$$: 1076-block  1
    $$$$$: 1076-block  2
branch  0 never executed
branch  1 never executed
        -: 1077:	{
    #####: 1078:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1078-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1078-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1078-block  2
branch  4 never executed
branch  5 never executed
        -: 1079:	    {
    #####: 1080:	      j++;
    $$$$$: 1080-block  0
        -: 1081:	    }
        -: 1082:	}
    #####: 1083:      if (j < choice2)
    $$$$$: 1083-block  0
branch  0 never executed
branch  1 never executed
        -: 1084:	{
    #####: 1085:	  return -1;				
    $$$$$: 1085-block  0
        -: 1086:	}
        -: 1087:
        -: 1088:      if (DEBUG) 
        -: 1089:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1090:
        -: 1091:      //increase supply count for choosen card by amount being discarded
    #####: 1092:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1093:			
        -: 1094:      //each other player gains a copy of revealed card
    #####: 1095:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1095-block  0
    $$$$$: 1095-block  1
    $$$$$: 1095-block  2
branch  0 never executed
branch  1 never executed
        -: 1096:	{
    #####: 1097:	  if (i != currentPlayer)
    $$$$$: 1097-block  0
branch  0 never executed
branch  1 never executed
        -: 1098:	    {
    #####: 1099:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1099-block  0
call    0 never executed
        -: 1100:	    }
        -: 1101:	}
        -: 1102:
        -: 1103:      //discard played card from hand
    #####: 1104:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1104-block  0
call    0 never executed
        -: 1105:
        -: 1106:      //trash copies of cards returned to supply
    #####: 1107:      for (j = 0; j < choice2; j++)
    $$$$$: 1107-block  0
    $$$$$: 1107-block  1
branch  0 never executed
branch  1 never executed
        -: 1108:	{
    #####: 1109:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1109-block  0
    $$$$$: 1109-block  1
    $$$$$: 1109-block  2
branch  0 never executed
branch  1 never executed
        -: 1110:	    {
    #####: 1111:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1111-block  0
branch  0 never executed
branch  1 never executed
        -: 1112:		{
    #####: 1113:		  discardCard(i, currentPlayer, state, 1);
    $$$$$: 1113-block  0
call    0 never executed
    #####: 1114:		  break;
        -: 1115:		}
        -: 1116:	    }
        -: 1117:	}			
        -: 1118:
    #####: 1119:      return 0;
    $$$$$: 1119-block  0
        -: 1120:		
        -: 1121:    case cutpurse:
        -: 1122:
    #####: 1123:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1123-block  0
call    0 never executed
    #####: 1124:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1124-block  0
    $$$$$: 1124-block  1
branch  0 never executed
branch  1 never executed
        -: 1125:	{
    #####: 1126:	  if (i != currentPlayer)
    $$$$$: 1126-block  0
branch  0 never executed
branch  1 never executed
        -: 1127:	    {
    #####: 1128:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1128-block  0
    $$$$$: 1128-block  1
    $$$$$: 1128-block  2
branch  0 never executed
branch  1 never executed
        -: 1129:		{
    #####: 1130:		  if (state->hand[i][j] == copper)
    $$$$$: 1130-block  0
branch  0 never executed
branch  1 never executed
        -: 1131:		    {
    #####: 1132:		      discardCard(j, i, state, 0);
    $$$$$: 1132-block  0
call    0 never executed
    #####: 1133:		      break;
        -: 1134:		    }
    #####: 1135:		  if (j == state->handCount[i])
    $$$$$: 1135-block  0
branch  0 never executed
branch  1 never executed
        -: 1136:		    {
    #####: 1137:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1137-block  0
    $$$$$: 1137-block  1
    $$$$$: 1137-block  2
branch  0 never executed
branch  1 never executed
        -: 1138:			{
        -: 1139:			  if (DEBUG)
        -: 1140:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1141:			}	
    #####: 1142:		      break;
    $$$$$: 1142-block  0
        -: 1143:		    }		
        -: 1144:		}
        -: 1145:					
        -: 1146:	    }
        -: 1147:				
        -: 1148:	}				
        -: 1149:
        -: 1150:      //discard played card from hand
    #####: 1151:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1151-block  0
call    0 never executed
        -: 1152:
    #####: 1153:      return 0;
        -: 1154:
        -: 1155:		
        -: 1156:    case embargo: 
        -: 1157:      //+2 Coins
    #####: 1158:      state->coins = state->coins + 2;
        -: 1159:			
        -: 1160:      //see if selected pile is in play
    #####: 1161:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1161-block  0
branch  0 never executed
branch  1 never executed
        -: 1162:	{
    #####: 1163:	  return -1;
    $$$$$: 1163-block  0
        -: 1164:	}
        -: 1165:			
        -: 1166:      //add embargo token to selected supply pile
    #####: 1167:      state->embargoTokens[choice1]++;
        -: 1168:			
        -: 1169:      //trash card
    #####: 1170:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1170-block  0
call    0 never executed
    #####: 1171:      return 0;
        -: 1172:		
        -: 1173:    case outpost:
        -: 1174:      //set outpost flag
     2000: 1175:      state->outpostPlayed++;
        -: 1176:			
        -: 1177:      //discard card
     2000: 1178:      discardCard(handPos, currentPlayer, state, 0);
     2000: 1178-block  0
call    0 returned 100%
     2000: 1179:      return 0;
        -: 1180:		
        -: 1181:    case salvager:
        -: 1182:      //+1 buy
    #####: 1183:      state->numBuys++;
        -: 1184:			
    #####: 1185:      if (choice1)
    $$$$$: 1185-block  0
branch  0 never executed
branch  1 never executed
        -: 1186:	{
        -: 1187:	  //gain coins equal to trashed card
    #####: 1188:	  state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1188-block  0
call    0 never executed
call    1 never executed
        -: 1189:	  //trash card
    #####: 1190:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1191:	}
        -: 1192:			
        -: 1193:      //discard card
    #####: 1194:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1194-block  0
call    0 never executed
    #####: 1195:      return 0;
        -: 1196:		
        -: 1197:    case sea_hag:
    #####: 1198:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1198-block  0
    $$$$$: 1198-block  1
    $$$$$: 1198-block  2
branch  0 never executed
branch  1 never executed
    #####: 1199:	if (i != currentPlayer){
    $$$$$: 1199-block  0
branch  0 never executed
branch  1 never executed
    #####: 1200:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1201:	  state->discardCount[i]++;
    #####: 1202:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1202-block  0
        -: 1203:	}
        -: 1204:      }
    #####: 1205:      return 0;
    $$$$$: 1205-block  0
        -: 1206:		
        -: 1207:    case treasure_map:
        -: 1208:      //search hand for another treasure_map
    #####: 1209:      index = -1;
    #####: 1210:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1210-block  0
    $$$$$: 1210-block  1
    $$$$$: 1210-block  2
branch  0 never executed
branch  1 never executed
        -: 1211:	{
    #####: 1212:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1212-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1212-block  1
branch  2 never executed
branch  3 never executed
        -: 1213:	    {
    #####: 1214:	      index = i;
    #####: 1215:	      break;
    $$$$$: 1215-block  0
        -: 1216:	    }
        -: 1217:	}
    #####: 1218:      if (index > -1)
    $$$$$: 1218-block  0
branch  0 never executed
branch  1 never executed
        -: 1219:	{
        -: 1220:	  //trash both treasure cards
    #####: 1221:	  discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1221-block  0
call    0 never executed
    #####: 1222:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1223:
        -: 1224:	  //gain 4 Gold cards
    #####: 1225:	  for (i = 0; i < 4; i++)
    $$$$$: 1225-block  0
branch  0 never executed
branch  1 never executed
        -: 1226:	    {
    #####: 1227:	      gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1227-block  0
call    0 never executed
        -: 1228:	    }
        -: 1229:				
        -: 1230:	  //return success
    #####: 1231:	  return 1;
    $$$$$: 1231-block  0
        -: 1232:	}
        -: 1233:			
        -: 1234:      //no second treasure_map found in hand
    #####: 1235:      return -1;
    $$$$$: 1235-block  0
        -: 1236:    }
        -: 1237:	
     9008: 1238:  return -1;
    $$$$$: 1238-block  0
     9008: 1238-block  1
        -: 1239:}
        -: 1240:
function discardCard called 5402 returned 100% blocks executed 89%
     5402: 1241:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
     5402: 1241-block  0
        -: 1242:{
        -: 1243:	
        -: 1244:  //if card is not trashed, added to Played pile 
     5402: 1245:  if (trashFlag < 1)
     5402: 1245-block  0
branch  0 taken 74% (fallthrough)
branch  1 taken 26%
        -: 1246:    {
        -: 1247:      //add card to played pile
     4002: 1248:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     4002: 1249:      state->playedCardCount++;
     4002: 1249-block  0
        -: 1250:    }
        -: 1251:	
        -: 1252:  //set played card to -1
     5402: 1253:  state->hand[currentPlayer][handPos] = -1;
        -: 1254:	
        -: 1255:  //remove card from player's hand
     5402: 1256:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
     5402: 1256-block  0
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1257:    {
        -: 1258:      //reduce number of cards in hand
      228: 1259:      state->handCount[currentPlayer]--;
      228: 1259-block  0
        -: 1260:    }
     5174: 1261:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
     5174: 1261-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1262:    {
        -: 1263:      //reduce number of cards in hand
    #####: 1264:      state->handCount[currentPlayer]--;
    $$$$$: 1264-block  0
        -: 1265:    }
        -: 1266:  else 	
        -: 1267:    {
        -: 1268:      //replace discarded card with last card in hand
     5174: 1269:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1270:      //set last card to -1
     5174: 1271:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1272:      //reduce number of cards in hand
     5174: 1273:      state->handCount[currentPlayer]--;
     5174: 1273-block  0
        -: 1274:    }
        -: 1275:	
     5402: 1276:  return 0;
     5402: 1276-block  0
        -: 1277:}
        -: 1278:
function gainCard called 33 returned 100% blocks executed 70%
       33: 1279:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
       33: 1279-block  0
        -: 1280:{
        -: 1281:  //Note: supplyPos is enum of choosen card
        -: 1282:	
        -: 1283:  //check if supply pile is empty (0) or card is not used in game (-1)
       33: 1284:  if ( supplyCount(supplyPos, state) < 1 )
       33: 1284-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1285:    {
    #####: 1286:      return -1;
    $$$$$: 1286-block  0
        -: 1287:    }
        -: 1288:	
        -: 1289:  //added card for [whoseTurn] current player:
        -: 1290:  // toFlag = 0 : add to discard
        -: 1291:  // toFlag = 1 : add to deck
        -: 1292:  // toFlag = 2 : add to hand
        -: 1293:
       33: 1294:  if (toFlag == 1)
       33: 1294-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1295:    {
    #####: 1296:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1297:      state->deckCount[player]++;
    $$$$$: 1297-block  0
        -: 1298:    }
       33: 1299:  else if (toFlag == 2)
       33: 1299-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1300:    {
    #####: 1301:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1302:      state->handCount[player]++;
    $$$$$: 1302-block  0
        -: 1303:    }
        -: 1304:  else
        -: 1305:    {
       33: 1306:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       33: 1307:      state->discardCount[player]++;
       33: 1307-block  0
        -: 1308:    }
        -: 1309:	
        -: 1310:  //decrease number in supply pile
       33: 1311:  state->supplyCount[supplyPos]--;
        -: 1312:	 
       33: 1313:  return 0;
       33: 1313-block  0
        -: 1314:}
        -: 1315:
function updateCoins called 9043 returned 100% blocks executed 100%
     9043: 1316:int updateCoins(int player, struct gameState *state, int bonus)
     9043: 1316-block  0
        -: 1317:{
        -: 1318:  int i;
        -: 1319:	
        -: 1320:  //reset coin count
     9043: 1321:  state->coins = 0;
        -: 1322:
        -: 1323:  //add coins for each Treasure card in player's hand
    54272: 1324:  for (i = 0; i < state->handCount[player]; i++)
     9043: 1324-block  0
    45229: 1324-block  1
    54272: 1324-block  2
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1325:    {
    45229: 1326:      if (state->hand[player][i] == copper)
    45229: 1326-block  0
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
        -: 1327:	{
    35206: 1328:	  state->coins += 1;
    35206: 1328-block  0
        -: 1329:	}
    10023: 1330:      else if (state->hand[player][i] == silver)
    10023: 1330-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1331:	{
       46: 1332:	  state->coins += 2;
       46: 1332-block  0
        -: 1333:	}
     9977: 1334:      else if (state->hand[player][i] == gold)
     9977: 1334-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1335:	{
       11: 1336:	  state->coins += 3;
       11: 1336-block  0
        -: 1337:	}	
        -: 1338:    }	
        -: 1339:
        -: 1340:  //add bonus
     9043: 1341:  state->coins += bonus;
        -: 1342:
     9043: 1343:  return 0;
     9043: 1343-block  0
        -: 1344:}
        -: 1345:
        -: 1346:
        -: 1347://end of dominion.c
        -: 1348:
