        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 36918 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
    36918:    9:  if (*(int*)a > *(int*)b)
    36918:    9-block  0
branch  0 taken 0
branch  1 taken 36918
    #####:   10:    return 1;
    $$$$$:   10-block  0
unconditional  0 never executed
    36918:   11:  if (*(int*)a < *(int*)b)
    36918:   11-block  0
branch  0 taken 13185
branch  1 taken 23733
    13185:   12:    return -1;
    13185:   12-block  0
unconditional  0 taken 13185
    23733:   13:  return 0;
    23733:   13-block  0
unconditional  0 taken 23733
    36918:   14:}
    36918:   14-block  0
unconditional  0 taken 36918
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    $$$$$:   17-block  0
unconditional  0 never executed
    #####:   18:  return g;
    $$$$$:   18-block  0
unconditional  0 never executed
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
unconditional  0 never executed
        -:   35:}
        -:   36:
function initializeGame called 886 returned 100% blocks executed 91%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      886:   44:  SelectStream(1);
      886:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      886:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
      886:   48-block  0
branch  0 taken 886
branch  1 taken 0
      886:   48-block  1
branch  2 taken 10
branch  3 taken 876
        -:   49:    {
       10:   50:      return -1;
       10:   50-block  0
unconditional  0 taken 10
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      876:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     9636:   57:  for (i = 0; i < 10; i++)
      876:   57-block  0
unconditional  0 taken 876
     9636:   57-block  1
branch  1 taken 8760
branch  2 taken 876
     8760:   57-block  2
unconditional  3 taken 8760
        -:   58:    {
    96360:   59:      for (j = 0; j < 10; j++)
     8760:   59-block  0
unconditional  0 taken 8760
    96360:   59-block  1
branch  1 taken 87600
branch  2 taken 8760
    87600:   59-block  2
unconditional  3 taken 87600
        -:   60:        {
    87600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
    87600:   61-block  0
branch  0 taken 78840
branch  1 taken 8760
    78840:   61-block  1
branch  2 taken 0
branch  3 taken 78840
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
unconditional  0 never executed
        -:   64:	    }
    87600:   65:        }
    87600:   65-block  0
unconditional  0 taken 87600
     8760:   66:    }
     8760:   66-block  0
unconditional  0 taken 8760
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      876:   73:  if (numPlayers == 2)
      876:   73-block  0
branch  0 taken 431
branch  1 taken 445
        -:   74:    {
      431:   75:      state->supplyCount[curse] = 10;
      431:   76:    }
      431:   76-block  0
unconditional  0 taken 431
      445:   77:  else if (numPlayers == 3)
      445:   77-block  0
branch  0 taken 5
branch  1 taken 440
        -:   78:    {
        5:   79:      state->supplyCount[curse] = 20;
        5:   80:    }
        5:   80-block  0
unconditional  0 taken 5
        -:   81:  else
        -:   82:    {
      440:   83:      state->supplyCount[curse] = 30;
      440:   83-block  0
unconditional  0 taken 440
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      876:   87:  if (numPlayers == 2)
      876:   87-block  0
branch  0 taken 431
branch  1 taken 445
        -:   88:    {
      431:   89:      state->supplyCount[estate] = 8;
      431:   90:      state->supplyCount[duchy] = 8;
      431:   91:      state->supplyCount[province] = 8;
      431:   92:    }
      431:   92-block  0
unconditional  0 taken 431
        -:   93:  else
        -:   94:    {
      445:   95:      state->supplyCount[estate] = 12;
      445:   96:      state->supplyCount[duchy] = 12;
      445:   97:      state->supplyCount[province] = 12;
      445:   97-block  0
unconditional  0 taken 445
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      876:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      876:  102:  state->supplyCount[silver] = 40;
      876:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    18396:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
      876:  106-block  0
unconditional  0 taken 876
    18396:  106-block  1
branch  1 taken 17520
branch  2 taken 876
    17520:  106-block  2
unconditional  3 taken 17520
        -:  107:    {
   144540:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
    17520:  108-block  0
unconditional  0 taken 17520
   144540:  108-block  1
branch  1 taken 135780
branch  2 taken 8760
   127020:  108-block  2
unconditional  3 taken 127020
        -:  109:	{
   135780:  110:	  if (kingdomCards[j] == i)
   135780:  110-block  0
branch  0 taken 8760
branch  1 taken 127020
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     8760:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
     8760:  113-block  0
branch  0 taken 8760
branch  1 taken 0
     8760:  113-block  1
branch  2 taken 0
branch  3 taken 8760
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    $$$$$:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
    #####:  117:		  }
    $$$$$:  117-block  0
unconditional  0 never executed
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  118-block  0
unconditional  0 never executed
    #####:  119:		}
    $$$$$:  119-block  0
unconditional  0 never executed
        -:  120:	      else
        -:  121:		{
     8760:  122:		  state->supplyCount[i] = 10;
     8760:  122-block  0
unconditional  0 taken 8760
        -:  123:		}
     8760:  124:	      break;
     8760:  124-block  0
unconditional  0 taken 8760
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   127020:  128:	      state->supplyCount[i] = -1;
   127020:  128-block  0
unconditional  0 taken 127020
        -:  129:	    }
   127020:  130:	}
   127020:  130-block  0
unconditional  0 taken 127020
        -:  131:
    17520:  132:    }
    17520:  132-block  0
unconditional  0 taken 17520
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     3513:  138:  for (i = 0; i < numPlayers; i++)
      876:  138-block  0
unconditional  0 taken 876
     3513:  138-block  1
branch  1 taken 2637
branch  2 taken 876
     2637:  138-block  2
unconditional  3 taken 2637
        -:  139:    {
     2637:  140:      state->deckCount[i] = 0;
    10548:  141:      for (j = 0; j < 3; j++)
     2637:  141-block  0
unconditional  0 taken 2637
    10548:  141-block  1
branch  1 taken 7911
branch  2 taken 2637
     7911:  141-block  2
unconditional  3 taken 7911
        -:  142:	{
     7911:  143:	  state->deck[i][j] = estate;
     7911:  144:	  state->deckCount[i]++;
     7911:  145:	}
     7911:  145-block  0
unconditional  0 taken 7911
    21096:  146:      for (j = 3; j < 10; j++)
     2637:  146-block  0
unconditional  0 taken 2637
    21096:  146-block  1
branch  1 taken 18459
branch  2 taken 2637
    18459:  146-block  2
unconditional  3 taken 18459
        -:  147:	{
    18459:  148:	  state->deck[i][j] = copper;
    18459:  149:	  state->deckCount[i]++;		
    18459:  150:	}
    18459:  150-block  0
unconditional  0 taken 18459
     2637:  151:    }
     2637:  151-block  0
unconditional  0 taken 2637
        -:  152:
        -:  153:  //shuffle player decks
     3513:  154:  for (i = 0; i < numPlayers; i++)
      876:  154-block  0
unconditional  0 taken 876
     3513:  154-block  1
branch  1 taken 2637
branch  2 taken 876
     2637:  154-block  2
unconditional  3 taken 2637
        -:  155:    {
     2637:  156:      if ( shuffle(i, state) < 0 )
     2637:  156-block  0
branch  0 taken 0
branch  1 taken 2637
        -:  157:	{
    #####:  158:	  return -1;
    $$$$$:  158-block  0
unconditional  0 never executed
        -:  159:	}
     2637:  160:    }
     2637:  160-block  0
unconditional  0 taken 2637
        -:  161:
        -:  162:  //draw player hands
     3513:  163:  for (i = 0; i < numPlayers; i++)
      876:  163-block  0
unconditional  0 taken 876
     3513:  163-block  1
branch  1 taken 2637
branch  2 taken 876
     2637:  163-block  2
unconditional  3 taken 2637
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     2637:  166:      state->handCount[i] = 0;
     2637:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
     2637:  173:    }
     2637:  173-block  0
unconditional  0 taken 2637
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    24528:  176:  for (i = 0; i <= treasure_map; i++)
      876:  176-block  0
unconditional  0 taken 876
    24528:  176-block  1
branch  1 taken 23652
branch  2 taken 876
    23652:  176-block  2
unconditional  3 taken 23652
        -:  177:    {
    23652:  178:      state->embargoTokens[i] = 0;
    23652:  179:    }
    23652:  179-block  0
unconditional  0 taken 23652
        -:  180:
        -:  181:  //initialize first player's turn
      876:  182:  state->outpostPlayed = 0;
      876:  183:  state->phase = 0;
      876:  184:  state->numActions = 1;
      876:  185:  state->numBuys = 1;
      876:  186:  state->playedCardCount = 0;
      876:  187:  state->whoseTurn = 0;
      876:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     5256:  192:  for (it = 0; it < 5; it++){
      876:  192-block  0
unconditional  0 taken 876
     5256:  192-block  1
branch  1 taken 4380
branch  2 taken 876
     4380:  192-block  2
unconditional  3 taken 4380
     4380:  193:    drawCard(state->whoseTurn, state);
     4380:  194:  }
     4380:  194-block  0
unconditional  0 taken 4380
        -:  195:
      876:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      876:  198:  return 0;
      876:  198-block  0
unconditional  0 taken 876
      886:  199:}
      886:  199-block  0
unconditional  0 taken 886
        -:  200:
function shuffle called 2897 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     2897:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     2897:  209:  if (state->deckCount[player] < 1)
     2897:  209-block  0
branch  0 taken 260
branch  1 taken 2637
      260:  210:    return -1;
      260:  210-block  0
unconditional  0 taken 260
     2637:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    29007:  214:  while (state->deckCount[player] > 0) {
     2637:  214-block  0
unconditional  0 taken 2637
    29007:  214-block  1
branch  1 taken 26370
branch  2 taken 2637
    26370:  214-block  2
unconditional  3 taken 26370
    26370:  215:    card = floor(Random() * state->deckCount[player]);
    26370:  216:    newDeck[newDeckPos] = state->deck[player][card];
    26370:  217:    newDeckPos++;
    91855:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    26370:  218-block  0
unconditional  0 taken 26370
    91855:  218-block  1
branch  1 taken 65485
branch  2 taken 26370
    65485:  218-block  2
unconditional  3 taken 65485
    65485:  219:      state->deck[player][i] = state->deck[player][i+1];
    65485:  220:    }
    65485:  220-block  0
unconditional  0 taken 65485
    26370:  221:    state->deckCount[player]--;
        -:  222:  }
    29007:  223:  for (i = 0; i < newDeckPos; i++) {
     2637:  223-block  0
unconditional  0 taken 2637
    29007:  223-block  1
branch  1 taken 26370
branch  2 taken 2637
    26370:  223-block  2
unconditional  3 taken 26370
    26370:  224:    state->deck[player][i] = newDeck[i];
    26370:  225:    state->deckCount[player]++;
    26370:  226:  }
    26370:  226-block  0
unconditional  0 taken 26370
        -:  227:
     2637:  228:  return 0;
     2637:  228-block  0
unconditional  0 taken 2637
     2897:  229:}
     2897:  229-block  0
unconditional  0 taken 2897
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
    $$$$$:  237-block  0
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
    $$$$$:  239-block  0
unconditional  0 never executed
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
    $$$$$:  243-block  0
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
    $$$$$:  245-block  0
unconditional  0 never executed
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
    $$$$$:  252-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  252-block  1
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
unconditional  0 never executed
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  258-block  0
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
    $$$$$:  260-block  0
unconditional  0 never executed
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    $$$$$:  269-block  0
unconditional  0 never executed
    #####:  270:}
    $$$$$:  270-block  0
unconditional  0 never executed
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    $$$$$:  282-block  0
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    $$$$$:  285-block  0
unconditional  0 never executed
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  286-block  0
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    $$$$$:  289-block  0
unconditional  0 never executed
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  290-block  0
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
    $$$$$:  293-block  0
unconditional  0 never executed
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
    $$$$$:  300-block  0
unconditional  0 never executed
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    $$$$$:  308-block  0
unconditional  0 never executed
    #####:  309:}
    $$$$$:  309-block  0
unconditional  0 never executed
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  312-block  0
unconditional  0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
    $$$$$:  317-block  0
unconditional  0 never executed
        -:  318:}
        -:  319:
function supplyCount called 50 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
       50:  321:  return state->supplyCount[card];
       50:  321-block  0
unconditional  0 taken 50
        -:  322:}
        -:  323:
function fullDeckCount called 250 returned 100% blocks executed 100%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
      250:  326:  int count = 0;
        -:  327:
      750:  328:  for (i = 0; i < state->deckCount[player]; i++)
      250:  328-block  0
unconditional  0 taken 250
      750:  328-block  1
branch  1 taken 500
branch  2 taken 250
      500:  328-block  2
unconditional  3 taken 500
        -:  329:    {
      500:  330:      if (state->deck[player][i] == card) count++;
      500:  330-block  0
branch  0 taken 300
branch  1 taken 200
      300:  330-block  1
unconditional  2 taken 300
      500:  331:    }
      500:  331-block  0
unconditional  0 taken 500
        -:  332:
      750:  333:  for (i = 0; i < state->handCount[player]; i++)
      250:  333-block  0
unconditional  0 taken 250
      750:  333-block  1
branch  1 taken 500
branch  2 taken 250
      500:  333-block  2
unconditional  3 taken 500
        -:  334:    {
      500:  335:      if (state->hand[player][i] == card) count++;
      500:  335-block  0
branch  0 taken 200
branch  1 taken 300
      200:  335-block  1
unconditional  2 taken 200
      500:  336:    }
      500:  336-block  0
unconditional  0 taken 500
        -:  337:
      750:  338:  for (i = 0; i < state->discardCount[player]; i++)
      250:  338-block  0
unconditional  0 taken 250
      750:  338-block  1
branch  1 taken 500
branch  2 taken 250
      500:  338-block  2
unconditional  3 taken 500
        -:  339:    {
      500:  340:      if (state->discard[player][i] == card) count++;
      500:  340-block  0
branch  0 taken 30
branch  1 taken 470
       30:  340-block  1
unconditional  2 taken 30
      500:  341:    }
      500:  341-block  0
unconditional  0 taken 500
        -:  342:
      250:  343:  return count;
      250:  343-block  0
unconditional  0 taken 250
        -:  344:}
        -:  345:
function whoseTurn called 385 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
      385:  347:  return state->whoseTurn;
      385:  347-block  0
unconditional  0 taken 385
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  356-block  0
unconditional  0 never executed
    $$$$$:  356-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  356-block  2
unconditional  3 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    $$$$$:  359-block  0
unconditional  0 never executed
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  363-block  0
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
    $$$$$:  365-block  0
unconditional  0 never executed
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  367-block  0
unconditional  0 never executed
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    $$$$$:  380-block  0
unconditional  0 never executed
    $$$$$:  380-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  380-block  2
unconditional  3 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
    $$$$$:  382-block  0
unconditional  0 never executed
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
    $$$$$:  387-block  0
unconditional  0 never executed
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
    $$$$$:  395-block  0
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
    $$$$$:  397-block  0
unconditional  0 never executed
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
    $$$$$:  402-block  0
unconditional  0 never executed
    $$$$$:  402-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  402-block  2
unconditional  3 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
    $$$$$:  404-block  0
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    $$$$$:  407-block  0
unconditional  0 never executed
    #####:  408:    }
    $$$$$:  408-block  0
unconditional  0 never executed
    #####:  409:  if ( j >= 3)
    $$$$$:  409-block  0
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
    $$$$$:  411-block  0
unconditional  0 never executed
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    $$$$$:  414-block  0
unconditional  0 never executed
    #####:  415:}
    $$$$$:  415-block  0
unconditional  0 never executed
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
unconditional  0 never executed
    $$$$$:  422-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  422-block  2
unconditional  3 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
unconditional  2 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
unconditional  2 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
unconditional  2 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
unconditional  2 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
unconditional  2 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
unconditional  2 never executed
    #####:  430:    }
    $$$$$:  430-block  0
unconditional  0 never executed
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
unconditional  0 never executed
    $$$$$:  433-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  433-block  2
unconditional  3 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
unconditional  2 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
unconditional  2 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
unconditional  2 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
unconditional  2 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
unconditional  2 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
unconditional  2 never executed
    #####:  441:    }
    $$$$$:  441-block  0
unconditional  0 never executed
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
unconditional  0 never executed
    $$$$$:  444-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  444-block  2
unconditional  3 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
unconditional  2 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
unconditional  2 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
unconditional  2 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
unconditional  2 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
unconditional  2 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
unconditional  2 never executed
    #####:  452:    }
    $$$$$:  452-block  0
unconditional  0 never executed
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
unconditional  0 never executed
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
unconditional  0 never executed
    $$$$$:  464-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  464-block  2
unconditional  3 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
    $$$$$:  470-block  0
unconditional  0 never executed
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
unconditional  0 never executed
        -:  474:	}
    #####:  475:    }
    $$$$$:  475-block  0
unconditional  0 never executed
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
unconditional  0 never executed
    $$$$$:  479-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  479-block  2
unconditional  3 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    $$$$$:  484-block  0
unconditional  0 never executed
    #####:  485:    }
    $$$$$:  485-block  0
unconditional  0 never executed
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  490-block  0
unconditional  0 never executed
    $$$$$:  490-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  490-block  2
unconditional  3 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    $$$$$:  495-block  0
unconditional  0 never executed
    #####:  496:    }
    $$$$$:  496-block  0
unconditional  0 never executed
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
unconditional  0 never executed
    $$$$$:  500-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  500-block  2
unconditional  3 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    $$$$$:  505-block  0
unconditional  0 never executed
    #####:  506:    }
    $$$$$:  506-block  0
unconditional  0 never executed
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
unconditional  0 never executed
    $$$$$:  510-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  510-block  2
unconditional  3 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
    $$$$$:  515-block  0
unconditional  0 never executed
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
    $$$$$:  518-block  0
unconditional  0 never executed
        -:  519:	}
    #####:  520:    }
    $$$$$:  520-block  0
unconditional  0 never executed
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
unconditional  0 never executed
        -:  523:}
        -:  524:
function drawCard called 5010 returned 100% blocks executed 75%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     5010:  528:  if (state->deckCount[player] <= 0){//Deck is empty
     5010:  528-block  0
branch  0 taken 130
branch  1 taken 4880
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      130:  533:    for (i = 0; i < state->discardCount[player];i++){
      130:  533-block  0
unconditional  0 taken 130
      130:  533-block  1
branch  1 taken 0
branch  2 taken 130
    $$$$$:  533-block  2
unconditional  3 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
    $$$$$:  536-block  0
unconditional  0 never executed
        -:  537:
      130:  538:    state->deckCount[player] = state->discardCount[player];
      130:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      130:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      130:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      130:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      130:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      130:  559:    if (deckCounter == 0)
      130:  559-block  0
branch  0 taken 130
branch  1 taken 0
      130:  560:      return -1;
      130:  560-block  0
unconditional  0 taken 130
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
    $$$$$:  565-block  0
unconditional  0 never executed
        -:  566:
        -:  567:  else{
     4880:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     4880:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     4880:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     4880:  576:    state->deckCount[player]--;
     4880:  577:    state->handCount[player]++;//Increment hand count
     4880:  577-block  0
unconditional  0 taken 4880
        -:  578:  }
        -:  579:
     4880:  580:  return 0;
     4880:  580-block  0
unconditional  0 taken 4880
     5010:  581:}
     5010:  581-block  0
unconditional  0 taken 5010
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
    $$$$$:  585-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
    $$$$$:  588-block  0
unconditional  0 never executed
        -:  589:    case estate:
    #####:  590:      return 2;
    $$$$$:  590-block  0
unconditional  0 never executed
        -:  591:    case duchy:
    #####:  592:      return 5;
    $$$$$:  592-block  0
unconditional  0 never executed
        -:  593:    case province:
    #####:  594:      return 8;
    $$$$$:  594-block  0
unconditional  0 never executed
        -:  595:    case copper:
    #####:  596:      return 0;
    $$$$$:  596-block  0
unconditional  0 never executed
        -:  597:    case silver:
    #####:  598:      return 3;
    $$$$$:  598-block  0
unconditional  0 never executed
        -:  599:    case gold:
    #####:  600:      return 6;
    $$$$$:  600-block  0
unconditional  0 never executed
        -:  601:    case adventurer:
    #####:  602:      return 6;
    $$$$$:  602-block  0
unconditional  0 never executed
        -:  603:    case council_room:
    #####:  604:      return 5;
    $$$$$:  604-block  0
unconditional  0 never executed
        -:  605:    case feast:
    #####:  606:      return 4;
    $$$$$:  606-block  0
unconditional  0 never executed
        -:  607:    case gardens:
    #####:  608:      return 4;
    $$$$$:  608-block  0
unconditional  0 never executed
        -:  609:    case mine:
    #####:  610:      return 5;
    $$$$$:  610-block  0
unconditional  0 never executed
        -:  611:    case remodel:
    #####:  612:      return 4;
    $$$$$:  612-block  0
unconditional  0 never executed
        -:  613:    case smithy:
    #####:  614:      return 4;
    $$$$$:  614-block  0
unconditional  0 never executed
        -:  615:    case village:
    #####:  616:      return 3;
    $$$$$:  616-block  0
unconditional  0 never executed
        -:  617:    case baron:
    #####:  618:      return 4;
    $$$$$:  618-block  0
unconditional  0 never executed
        -:  619:    case great_hall:
    #####:  620:      return 3;
    $$$$$:  620-block  0
unconditional  0 never executed
        -:  621:    case minion:
    #####:  622:      return 5;
    $$$$$:  622-block  0
unconditional  0 never executed
        -:  623:    case steward:
    #####:  624:      return 3;
    $$$$$:  624-block  0
unconditional  0 never executed
        -:  625:    case tribute:
    #####:  626:      return 5;
    $$$$$:  626-block  0
unconditional  0 never executed
        -:  627:    case ambassador:
    #####:  628:      return 3;
    $$$$$:  628-block  0
unconditional  0 never executed
        -:  629:    case cutpurse:
    #####:  630:      return 4;
    $$$$$:  630-block  0
unconditional  0 never executed
        -:  631:    case embargo: 
    #####:  632:      return 2;
    $$$$$:  632-block  0
unconditional  0 never executed
        -:  633:    case outpost:
    #####:  634:      return 5;
    $$$$$:  634-block  0
unconditional  0 never executed
        -:  635:    case salvager:
    #####:  636:      return 4;
    $$$$$:  636-block  0
unconditional  0 never executed
        -:  637:    case sea_hag:
    #####:  638:      return 4;
    $$$$$:  638-block  0
unconditional  0 never executed
        -:  639:    case treasure_map:
    #####:  640:      return 4;
    $$$$$:  640-block  0
unconditional  0 never executed
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    $$$$$:  643-block  0
unconditional  0 never executed
    #####:  644:}
    $$$$$:  644-block  0
unconditional  0 never executed
        -:  645:
function callCutpurse called 115 returned 100% blocks executed 75%
        -:  646:int callCutpurse(struct gameState *state, int i, int j, int k, int currentPlayer, int handPos) {
      115:  647:    updateCoins(currentPlayer, state, 2);
        -:  648:
      575:  649:    for (i = 0; i < state->numPlayers; i++)
      115:  649-block  0
unconditional  0 taken 115
      575:  649-block  1
branch  1 taken 460
branch  2 taken 115
      460:  649-block  2
unconditional  3 taken 460
        -:  650:    {
      460:  651:        if (i != currentPlayer)
      460:  651-block  0
branch  0 taken 345
branch  1 taken 115
        -:  652:        {
      945:  653:            for (j = 0; j < state->handCount[i]-1; j++)
      345:  653-block  0
unconditional  0 taken 345
      945:  653-block  1
branch  1 taken 780
branch  2 taken 165
      600:  653-block  2
unconditional  3 taken 600
        -:  654:            {
      780:  655:                if (state->hand[i][j] == copper)
      780:  655-block  0
branch  0 taken 180
branch  1 taken 600
        -:  656:                {
      180:  657:                    discardCard(j, i, state, 0);
      180:  658:                    break;
      180:  658-block  0
unconditional  0 taken 180
        -:  659:                }
      600:  660:                if (j == state->handCount[i])
      600:  660-block  0
branch  0 taken 0
branch  1 taken 600
        -:  661:                {
    #####:  662:                    for (k = 0; k < state->handCount[i]; k++)
    $$$$$:  662-block  0
unconditional  0 never executed
    $$$$$:  662-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  662-block  2
unconditional  3 never executed
        -:  663:                    {
        -:  664:                        if (DEBUG)
        -:  665:                            printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####:  666:                    }
    $$$$$:  666-block  0
unconditional  0 never executed
    #####:  667:                    break;
    $$$$$:  667-block  0
unconditional  0 never executed
        -:  668:                }
      600:  669:            }
      600:  669-block  0
unconditional  0 taken 600
        -:  670:
      345:  671:        }
      345:  671-block  0
unconditional  0 taken 345
        -:  672:
      460:  673:    }
      460:  673-block  0
unconditional  0 taken 460
        -:  674:
        -:  675:    //discard played card from hand
      115:  676:    discardCard(handPos, currentPlayer, state, 0);
        -:  677:
      115:  678:    return 0;
      115:  678-block  0
unconditional  0 taken 115
        -:  679:}
        -:  680:
        -:  681:int
function callAdventurer called 50 returned 100% blocks executed 100%
        -:  682:callAdventurer(struct gameState *state, int currentPlayer, int *temphand, int drawntreasure, int cardDrawn,
        -:  683:               int z) {
      380:  684:    while(drawntreasure < 2){
       50:  684-block  0
unconditional  0 taken 50
      380:  684-block  1
branch  1 taken 330
branch  2 taken 50
      330:  684-block  2
unconditional  3 taken 330
      330:  685:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
      330:  685-block  0
branch  0 taken 130
branch  1 taken 200
      130:  686:            shuffle(currentPlayer, state);
      130:  687:        }
      130:  687-block  0
unconditional  0 taken 130
      330:  688:        drawCard(currentPlayer, state);
      330:  689:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      330:  690:        if (cardDrawn == copper || cardDrawn == silver)
      330:  690-block  0
branch  0 taken 290
branch  1 taken 40
      290:  690-block  1
branch  2 taken 60
branch  3 taken 230
      100:  691:            drawntreasure++;
      100:  691-block  0
unconditional  0 taken 100
        -:  692:        else{
      230:  693:            temphand[z]=cardDrawn;
      230:  694:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      230:  695:            z++;
      230:  695-block  0
unconditional  0 taken 230
        -:  696:        }
        -:  697:    }
        -:  698:
      280:  699:    while(z-1>=0){
       50:  699-block  0
unconditional  0 taken 50
      280:  699-block  1
branch  1 taken 230
branch  2 taken 50
      230:  699-block  2
unconditional  3 taken 230
      230:  700:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
      230:  701:        z=z-1;
        -:  702:    }
       50:  703:    return 0;
       50:  703-block  0
unconditional  0 taken 50
        -:  704:}
        -:  705:
function callSmithy called 100 returned 100% blocks executed 100%
        -:  706:int callSmithy(int i, int currentPlayer, struct gameState *state, int handPos) {
        -:  707:
        -:  708:
      300:  709:    for (i = 0; i < 2; i++) {
      100:  709-block  0
unconditional  0 taken 100
      300:  709-block  1
branch  1 taken 200
branch  2 taken 100
      200:  709-block  2
unconditional  3 taken 200
      200:  710:        drawCard(currentPlayer, state);
      200:  711:    }
      200:  711-block  0
unconditional  0 taken 200
        -:  712:
        -:  713://discard card from hand
      100:  714:    discardCard(handPos, currentPlayer, state, 0);
      100:  715:    return 0;
      100:  715-block  0
unconditional  0 taken 100
        -:  716:
        -:  717:}
        -:  718:
        -:  719:
function callGreatHall called 100 returned 100% blocks executed 100%
        -:  720:int callGreatHall(int currentPlayer, struct gameState *state, int handPos) {
        -:  721://+1 Card
      100:  722:    drawCard(currentPlayer, state);
        -:  723:
        -:  724://+1 Actions
      100:  725:    state->numActions++;
        -:  726:
        -:  727://discard card from hand
      100:  728:    discardCard(handPos, currentPlayer, state, 0);
      100:  729:    return 0;
      100:  729-block  0
unconditional  0 taken 100
        -:  730:}
        -:  731:
        -:  732:
function callMinion called 0 returned 0% blocks executed 0%
        -:  733:int callMinion(struct gameState *state, int handPos, int currentPlayer, int choice1, int choice2, int i, int j){
        -:  734:
        -:  735:        //+1 action
    #####:  736:        state->numActions++;
        -:  737:
        -:  738:    //discard card from hand
    #####:  739:    discardCard(handPos, currentPlayer, state, 0);
        -:  740:
    #####:  741:    if (choice1)		//+2 coins
    $$$$$:  741-block  0
branch  0 never executed
branch  1 never executed
        -:  742:    {
    #####:  743:        state->coins = state->coins + 2;
    #####:  744:    }
    $$$$$:  744-block  0
unconditional  0 never executed
        -:  745:
    #####:  746:    else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  746-block  0
branch  0 never executed
branch  1 never executed
        -:  747:    {
        -:  748:        //discard hand
    #####:  749:        while(numHandCards(state) > 0)
    $$$$$:  749-block  0
unconditional  0 never executed
    $$$$$:  749-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  749-block  2
unconditional  3 never executed
        -:  750:        {
    #####:  751:            discardCard(handPos, currentPlayer, state, 0);
        -:  752:        }
        -:  753:
        -:  754:        //draw 4
    #####:  755:        for (i = 0; i < 4; i++)
    $$$$$:  755-block  0
unconditional  0 never executed
    $$$$$:  755-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  755-block  2
unconditional  3 never executed
        -:  756:        {
    #####:  757:            drawCard(currentPlayer, state);
    #####:  758:        }
    $$$$$:  758-block  0
unconditional  0 never executed
        -:  759:
        -:  760:        //other players discard hand and redraw if hand size > 4
    #####:  761:        for (i = 0; i < state->numPlayers; i++)
    $$$$$:  761-block  0
unconditional  0 never executed
    $$$$$:  761-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  761-block  2
unconditional  3 never executed
        -:  762:        {
    #####:  763:            if (i != currentPlayer)
    $$$$$:  763-block  0
branch  0 never executed
branch  1 never executed
        -:  764:            {
    #####:  765:                if ( state->handCount[i] > 4 )
    $$$$$:  765-block  0
branch  0 never executed
branch  1 never executed
        -:  766:                {
        -:  767:                    //discard hand
    #####:  768:                    while( state->handCount[i] < 0 )
    $$$$$:  768-block  0
unconditional  0 never executed
    $$$$$:  768-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  768-block  2
unconditional  3 never executed
        -:  769:                    {
    #####:  770:                        discardCard(handPos, i, state, 0);
        -:  771:                    }
        -:  772:
        -:  773:                    //draw 4
    #####:  774:                    for (j = 0; j < 4; j++)
    $$$$$:  774-block  0
unconditional  0 never executed
    $$$$$:  774-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  774-block  2
unconditional  3 never executed
        -:  775:                    {
    #####:  776:                        drawCard(i, state);
    #####:  777:                    }
    $$$$$:  777-block  0
unconditional  0 never executed
    #####:  778:                }
    $$$$$:  778-block  0
unconditional  0 never executed
    #####:  779:            }
    $$$$$:  779-block  0
unconditional  0 never executed
    #####:  780:        }
    $$$$$:  780-block  0
unconditional  0 never executed
        -:  781:
    #####:  782:    }
    $$$$$:  782-block  0
unconditional  0 never executed
    #####:  783:    return 0;
    $$$$$:  783-block  0
unconditional  0 never executed
        -:  784:}
        -:  785:
function cardEffect called 365 returned 100% blocks executed 7%
        -:  786:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  787:{
      365:  788:    int i = 0;
      365:  789:    int j = 0;
      365:  790:    int k = 0;
      365:  791:    int x = 0;
        -:  792:    int index;
      365:  793:    int currentPlayer = whoseTurn(state);
      365:  794:    int nextPlayer = currentPlayer + 1;
        -:  795:
      365:  796:    int tributeRevealedCards[2] = {-1, -1};
        -:  797:    int temphand[MAX_HAND];// moved above the if statement
      365:  798:    int drawntreasure=0;
      365:  799:    int cardDrawn = 0;
      365:  800:    int z = 0;// this is the counter for the temp hand
      365:  801:    if (nextPlayer > (state->numPlayers - 1)){
      365:  801-block  0
branch  0 taken 0
branch  1 taken 365
    #####:  802:        nextPlayer = 0;
    #####:  803:    }
    $$$$$:  803-block  0
unconditional  0 never executed
        -:  804:
      365:  805:    if(card == cutpurse){
      365:  805-block  0
branch  0 taken 115
branch  1 taken 250
      115:  806:        if(callCutpurse(state, i, j, k, currentPlayer, handPos)  == 0)
      115:  806-block  0
branch  0 taken 115
branch  1 taken 0
      115:  807:        {return 0;}
      115:  807-block  0
unconditional  0 taken 115
    #####:  808:        else return -1;
    $$$$$:  808-block  0
unconditional  0 never executed
        -:  809:    }
      250:  810:    if(card == smithy){
      250:  810-block  0
branch  0 taken 100
branch  1 taken 150
      100:  811:        if(callSmithy(i, currentPlayer, state, handPos)  == 0)
      100:  811-block  0
branch  0 taken 100
branch  1 taken 0
      100:  812:        {return 0;}
      100:  812-block  0
unconditional  0 taken 100
    #####:  813:        else return -1;
    $$$$$:  813-block  0
unconditional  0 never executed
        -:  814:    }
      150:  815:    if(card == adventurer){
      150:  815-block  0
branch  0 taken 50
branch  1 taken 100
       50:  816:        if(callAdventurer(state, currentPlayer, temphand, drawntreasure, cardDrawn, z)  == 0)
       50:  816-block  0
branch  0 taken 50
branch  1 taken 0
       50:  817:        {return 0;}
       50:  817-block  0
unconditional  0 taken 50
    #####:  818:        else return -1;
    $$$$$:  818-block  0
unconditional  0 never executed
        -:  819:    }
      100:  820:    if(card == great_hall){
      100:  820-block  0
branch  0 taken 100
branch  1 taken 0
      100:  821:        if(callGreatHall(currentPlayer, state, handPos)  == 0)
      100:  821-block  0
branch  0 taken 100
branch  1 taken 0
      100:  822:        {return 0;}
      100:  822-block  0
unconditional  0 taken 100
    #####:  823:        else return -1;
    $$$$$:  823-block  0
unconditional  0 never executed
        -:  824:    }
    #####:  825:    if(card == minion){
    $$$$$:  825-block  0
branch  0 never executed
branch  1 never executed
    #####:  826:        if(callMinion(state, handPos, currentPlayer, choice1, choice2, i, j)  == 0)
    $$$$$:  826-block  0
branch  0 never executed
branch  1 never executed
    #####:  827:        {return 0;}
    $$$$$:  827-block  0
unconditional  0 never executed
    #####:  828:        else return -1;
    $$$$$:  828-block  0
unconditional  0 never executed
        -:  829:    }
        -:  830:
        -:  831:
        -:  832:
        -:  833:
        -:  834:    //uses switch to select card and perform actions
    #####:  835:  switch( card ) 
    $$$$$:  835-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
        -:  836:    {
        -:  837:			
        -:  838:    case council_room:
        -:  839:      //+4 Cards
    #####:  840:      for (i = 0; i < 4; i++)
    $$$$$:  840-block  0
unconditional  0 never executed
    $$$$$:  840-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  840-block  2
unconditional  3 never executed
        -:  841:	{
    #####:  842:	  drawCard(currentPlayer, state);
    #####:  843:	}
    $$$$$:  843-block  0
unconditional  0 never executed
        -:  844:			
        -:  845:      //+1 Buy
    #####:  846:      state->numBuys++;
        -:  847:			
        -:  848:      //Each other player draws a card
    #####:  849:      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  849-block  0
unconditional  0 never executed
    $$$$$:  849-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  849-block  2
unconditional  3 never executed
        -:  850:	{
    #####:  851:	  if ( i != currentPlayer )
    $$$$$:  851-block  0
branch  0 never executed
branch  1 never executed
        -:  852:	    {
    #####:  853:	      drawCard(i, state);
    #####:  854:	    }
    $$$$$:  854-block  0
unconditional  0 never executed
    #####:  855:	}
    $$$$$:  855-block  0
unconditional  0 never executed
        -:  856:			
        -:  857:      //put played card in played card pile
    #####:  858:      discardCard(handPos, currentPlayer, state, 0);
        -:  859:			
    #####:  860:      return 0;
    $$$$$:  860-block  0
unconditional  0 never executed
        -:  861:			
        -:  862:    case feast:
        -:  863:      //gain card with cost up to 5
        -:  864:      //Backup hand
    #####:  865:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  865-block  0
unconditional  0 never executed
    $$$$$:  865-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  865-block  2
unconditional  3 never executed
    #####:  866:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  867:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  868:      }
    $$$$$:  868-block  0
unconditional  0 never executed
        -:  869:      //Backup hand
        -:  870:
        -:  871:      //Update Coins for Buy
    #####:  872:      updateCoins(currentPlayer, state, 5);
    #####:  873:      x = 1;//Condition to loop on
    #####:  874:      while( x == 1) {//Buy one card
    $$$$$:  874-block  0
unconditional  0 never executed
    $$$$$:  874-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  874-block  2
unconditional  3 never executed
    #####:  875:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  875-block  0
branch  0 never executed
branch  1 never executed
        -:  876:	  if (DEBUG)
        -:  877:	    printf("None of that card left, sorry!\n");
        -:  878:
        -:  879:	  if (DEBUG){
        -:  880:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  881:	  }
    #####:  882:	}
    $$$$$:  882-block  0
unconditional  0 never executed
    #####:  883:	else if (state->coins < getCost(choice1)){
    $$$$$:  883-block  0
branch  0 never executed
branch  1 never executed
    #####:  884:	  printf("That card is too expensive!\n");
        -:  885:
        -:  886:	  if (DEBUG){
        -:  887:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  888:	  }
    #####:  889:	}
    $$$$$:  889-block  0
unconditional  0 never executed
        -:  890:	else{
        -:  891:
        -:  892:	  if (DEBUG){
        -:  893:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  894:	  }
        -:  895:
    #####:  896:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  897:	  x = 0;//No more buying cards
    $$$$$:  897-block  0
unconditional  0 never executed
        -:  898:
        -:  899:	  if (DEBUG){
        -:  900:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  901:	  }
        -:  902:
        -:  903:	}
        -:  904:      }     
        -:  905:
        -:  906:      //Reset Hand
    #####:  907:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  907-block  0
unconditional  0 never executed
    $$$$$:  907-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  907-block  2
unconditional  3 never executed
    #####:  908:	state->hand[currentPlayer][i] = temphand[i];
    #####:  909:	temphand[i] = -1;
    #####:  910:      }
    $$$$$:  910-block  0
unconditional  0 never executed
        -:  911:      //Reset Hand
        -:  912:      			
    #####:  913:      return 0;
    $$$$$:  913-block  0
unconditional  0 never executed
        -:  914:			
        -:  915:    case gardens:
    #####:  916:      return -1;
    $$$$$:  916-block  0
unconditional  0 never executed
        -:  917:			
        -:  918:    case mine:
    #####:  919:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  920:
    #####:  921:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  921-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  921-block  1
branch  2 never executed
branch  3 never executed
        -:  922:	{
    #####:  923:	  return -1;
    $$$$$:  923-block  0
unconditional  0 never executed
        -:  924:	}
        -:  925:		
    #####:  926:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  926-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  926-block  1
branch  2 never executed
branch  3 never executed
        -:  927:	{
    #####:  928:	  return -1;
    $$$$$:  928-block  0
unconditional  0 never executed
        -:  929:	}
        -:  930:
    #####:  931:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  931-block  0
branch  0 never executed
branch  1 never executed
        -:  932:	{
    #####:  933:	  return -1;
    $$$$$:  933-block  0
unconditional  0 never executed
        -:  934:	}
        -:  935:
    #####:  936:      gainCard(choice2, state, 2, currentPlayer);
        -:  937:
        -:  938:      //discard card from hand
    #####:  939:      discardCard(handPos, currentPlayer, state, 0);
        -:  940:
        -:  941:      //discard trashed card
    #####:  942:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  942-block  0
unconditional  0 never executed
    $$$$$:  942-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  942-block  2
unconditional  3 never executed
        -:  943:	{
    #####:  944:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  944-block  0
branch  0 never executed
branch  1 never executed
        -:  945:	    {
    #####:  946:	      discardCard(i, currentPlayer, state, 0);			
    #####:  947:	      break;
    $$$$$:  947-block  0
unconditional  0 never executed
        -:  948:	    }
    #####:  949:	}
    $$$$$:  949-block  0
unconditional  0 never executed
        -:  950:			
    #####:  951:      return 0;
    $$$$$:  951-block  0
unconditional  0 never executed
        -:  952:			
        -:  953:    case remodel:
    #####:  954:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  955:
    #####:  956:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  956-block  0
branch  0 never executed
branch  1 never executed
        -:  957:	{
    #####:  958:	  return -1;
    $$$$$:  958-block  0
unconditional  0 never executed
        -:  959:	}
        -:  960:
    #####:  961:      gainCard(choice2, state, 0, currentPlayer);
        -:  962:
        -:  963:      //discard card from hand
    #####:  964:      discardCard(handPos, currentPlayer, state, 0);
        -:  965:
        -:  966:      //discard trashed card
    #####:  967:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  967-block  0
unconditional  0 never executed
    $$$$$:  967-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  967-block  2
unconditional  3 never executed
        -:  968:	{
    #####:  969:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  969-block  0
branch  0 never executed
branch  1 never executed
        -:  970:	    {
    #####:  971:	      discardCard(i, currentPlayer, state, 0);			
    #####:  972:	      break;
    $$$$$:  972-block  0
unconditional  0 never executed
        -:  973:	    }
    #####:  974:	}
    $$$$$:  974-block  0
unconditional  0 never executed
        -:  975:
        -:  976:
    #####:  977:      return 0;
    $$$$$:  977-block  0
unconditional  0 never executed
        -:  978:		
        -:  979:
        -:  980:		
        -:  981:    case village:
        -:  982:      //+1 Card
    #####:  983:      drawCard(currentPlayer, state);
        -:  984:			
        -:  985:      //+2 Actions
    #####:  986:      state->numActions = state->numActions + 2;
        -:  987:			
        -:  988:      //discard played card from hand
    #####:  989:      discardCard(handPos, currentPlayer, state, 0);
    #####:  990:      return 0;
    $$$$$:  990-block  0
unconditional  0 never executed
        -:  991:		
        -:  992:    case baron:
    #####:  993:      state->numBuys++;//Increase buys by 1!
    #####:  994:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  994-block  0
branch  0 never executed
branch  1 never executed
    #####:  995:	int p = 0;//Iterator for hand!
    #####:  996:	int card_not_discarded = 1;//Flag for discard set!
    #####:  997:	while(card_not_discarded){
    $$$$$:  997-block  0
unconditional  0 never executed
    $$$$$:  997-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  997-block  2
unconditional  3 never executed
    #####:  998:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  998-block  0
branch  0 never executed
branch  1 never executed
    #####:  999:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1000:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1001:	    state->discardCount[currentPlayer]++;
    #####: 1002:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$: 1002-block  0
unconditional  0 never executed
    $$$$$: 1002-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1002-block  2
unconditional  3 never executed
    #####: 1003:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1004:	    }
    $$$$$: 1004-block  0
unconditional  0 never executed
    #####: 1005:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1006:	    state->handCount[currentPlayer]--;
    #####: 1007:	    card_not_discarded = 0;//Exit the loopfullde
    #####: 1008:	  }
    $$$$$: 1008-block  0
unconditional  0 never executed
    #####: 1009:	  else if (p > state->handCount[currentPlayer]){
    $$$$$: 1009-block  0
branch  0 never executed
branch  1 never executed
        -: 1010:	    if(DEBUG) {
        -: 1011:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1012:	      printf("Must gain an estate if there are any\n");
        -: 1013:	    }
    #####: 1014:	    if (supplyCount(estate, state) > 0){
    $$$$$: 1014-block  0
branch  0 never executed
branch  1 never executed
    #####: 1015:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1016:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1017:	      if (supplyCount(estate, state) == 0){
    $$$$$: 1017-block  0
branch  0 never executed
branch  1 never executed
    #####: 1018:		isGameOver(state);
    #####: 1019:	      }
    $$$$$: 1019-block  0
unconditional  0 never executed
    #####: 1020:	    }
    $$$$$: 1020-block  0
unconditional  0 never executed
    #####: 1021:	    card_not_discarded = 0;//Exit the loop
    #####: 1022:	  }
    $$$$$: 1022-block  0
unconditional  0 never executed
        -: 1023:			    
        -: 1024:	  else{
    #####: 1025:	    p++;//Next card
    $$$$$: 1025-block  0
unconditional  0 never executed
        -: 1026:	  }
        -: 1027:	}
    #####: 1028:      }
    $$$$$: 1028-block  0
unconditional  0 never executed
        -: 1029:			    
        -: 1030:      else{
    #####: 1031:	if (supplyCount(estate, state) > 0){
    $$$$$: 1031-block  0
branch  0 never executed
branch  1 never executed
    #####: 1032:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1033:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1034:	  if (supplyCount(estate, state) == 0){
    $$$$$: 1034-block  0
branch  0 never executed
branch  1 never executed
    #####: 1035:	    isGameOver(state);
    #####: 1036:	  }
    $$$$$: 1036-block  0
unconditional  0 never executed
    #####: 1037:	}
    $$$$$: 1037-block  0
unconditional  0 never executed
        -: 1038:      }
        -: 1039:	    
        -: 1040:      
    #####: 1041:      return 0;
    $$$$$: 1041-block  0
unconditional  0 never executed
        -: 1042:		
        -: 1043:
        -: 1044:		
        -: 1045:    case steward:
    #####: 1046:      if (choice1 == 1)
    $$$$$: 1046-block  0
branch  0 never executed
branch  1 never executed
        -: 1047:	{
        -: 1048:	  //+2 cards
    #####: 1049:	  drawCard(currentPlayer, state);
    #####: 1050:	  drawCard(currentPlayer, state);
    #####: 1051:	}
    $$$$$: 1051-block  0
unconditional  0 never executed
    #####: 1052:      else if (choice1 == 2)
    $$$$$: 1052-block  0
branch  0 never executed
branch  1 never executed
        -: 1053:	{
        -: 1054:	  //+2 coins
    #####: 1055:	  state->coins = state->coins + 2;
    #####: 1056:	}
    $$$$$: 1056-block  0
unconditional  0 never executed
        -: 1057:      else
        -: 1058:	{
        -: 1059:	  //trash 2 cards in hand
    #####: 1060:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1061:	  discardCard(choice3, currentPlayer, state, 1);
    $$$$$: 1061-block  0
unconditional  0 never executed
        -: 1062:	}
        -: 1063:			
        -: 1064:      //discard card from hand
    #####: 1065:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1066:      return 0;
    $$$$$: 1066-block  0
unconditional  0 never executed
        -: 1067:		
        -: 1068:    case tribute:
    #####: 1069:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1069-block  0
branch  0 never executed
branch  1 never executed
    #####: 1070:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1070-block  0
branch  0 never executed
branch  1 never executed
    #####: 1071:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1072:	  state->deckCount[nextPlayer]--;
    #####: 1073:	}
    $$$$$: 1073-block  0
unconditional  0 never executed
    #####: 1074:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1074-block  0
branch  0 never executed
branch  1 never executed
    #####: 1075:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1076:	  state->discardCount[nextPlayer]--;
    #####: 1077:	}
    $$$$$: 1077-block  0
unconditional  0 never executed
        -: 1078:	else{
        -: 1079:	  //No Card to Reveal
        -: 1080:	  if (DEBUG){
        -: 1081:	    printf("No cards to reveal\n");
        -: 1082:	  }
        -: 1083:	}
    #####: 1084:      }
    $$$$$: 1084-block  0
unconditional  0 never executed
        -: 1085:	    
        -: 1086:      else{
    #####: 1087:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1087-block  0
branch  0 never executed
branch  1 never executed
    #####: 1088:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1088-block  0
unconditional  0 never executed
    $$$$$: 1088-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1088-block  2
unconditional  3 never executed
    #####: 1089:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1090:	    state->deckCount[nextPlayer]++;
    #####: 1091:	    state->discard[nextPlayer][i] = -1;
    #####: 1092:	    state->discardCount[nextPlayer]--;
    #####: 1093:	  }
    $$$$$: 1093-block  0
unconditional  0 never executed
        -: 1094:			    
    #####: 1095:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1096:	} 
    $$$$$: 1096-block  0
unconditional  0 never executed
    #####: 1097:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1098:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1099:	state->deckCount[nextPlayer]--;
    #####: 1100:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1101:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1102:	state->deckCount[nextPlayer]--;
    $$$$$: 1102-block  0
unconditional  0 never executed
        -: 1103:      }    
        -: 1104:		       
    #####: 1105:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1105-block  0
branch  0 never executed
branch  1 never executed
    #####: 1106:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1107:	state->playedCardCount++;
    #####: 1108:	tributeRevealedCards[1] = -1;
    #####: 1109:      }
    $$$$$: 1109-block  0
unconditional  0 never executed
        -: 1110:
    #####: 1111:      for (i = 0; i <= 2; i ++){
    $$$$$: 1111-block  0
unconditional  0 never executed
    $$$$$: 1111-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1111-block  2
unconditional  3 never executed
    #####: 1112:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1112-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1112-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1112-block  2
branch  4 never executed
branch  5 never executed
    #####: 1113:	  state->coins += 2;
    #####: 1114:	}
    $$$$$: 1114-block  0
unconditional  0 never executed
        -: 1115:		    
    #####: 1116:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1116-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1116-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1116-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1116-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1116-block  4
branch  8 never executed
branch  9 never executed
    #####: 1117:	  drawCard(currentPlayer, state);
    #####: 1118:	  drawCard(currentPlayer, state);
    #####: 1119:	}
    $$$$$: 1119-block  0
unconditional  0 never executed
        -: 1120:	else{//Action Card
    #####: 1121:	  state->numActions = state->numActions + 2;
    $$$$$: 1121-block  0
unconditional  0 never executed
        -: 1122:	}
    #####: 1123:      }
    $$$$$: 1123-block  0
unconditional  0 never executed
        -: 1124:	    
    #####: 1125:      return 0;
    $$$$$: 1125-block  0
unconditional  0 never executed
        -: 1126:		
        -: 1127:    case ambassador:
    #####: 1128:      j = 0;		//used to check if player has enough cards to discard
        -: 1129:
    #####: 1130:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1130-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1130-block  1
branch  2 never executed
branch  3 never executed
        -: 1131:	{
    #####: 1132:	  return -1;				
    $$$$$: 1132-block  0
unconditional  0 never executed
        -: 1133:	}
        -: 1134:
    #####: 1135:      if (choice1 == handPos)
    $$$$$: 1135-block  0
branch  0 never executed
branch  1 never executed
        -: 1136:	{
    #####: 1137:	  return -1;
    $$$$$: 1137-block  0
unconditional  0 never executed
        -: 1138:	}
        -: 1139:
    #####: 1140:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1140-block  0
unconditional  0 never executed
    $$$$$: 1140-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1140-block  2
unconditional  3 never executed
        -: 1141:	{
    #####: 1142:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1142-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1142-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1142-block  2
branch  4 never executed
branch  5 never executed
        -: 1143:	    {
    #####: 1144:	      j++;
    #####: 1145:	    }
    $$$$$: 1145-block  0
unconditional  0 never executed
    #####: 1146:	}
    $$$$$: 1146-block  0
unconditional  0 never executed
    #####: 1147:      if (j < choice2)
    $$$$$: 1147-block  0
branch  0 never executed
branch  1 never executed
        -: 1148:	{
    #####: 1149:	  return -1;				
    $$$$$: 1149-block  0
unconditional  0 never executed
        -: 1150:	}
        -: 1151:
        -: 1152:      if (DEBUG) 
        -: 1153:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1154:
        -: 1155:      //increase supply count for choosen card by amount being discarded
    #####: 1156:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1157:			
        -: 1158:      //each other player gains a copy of revealed card
    #####: 1159:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1159-block  0
unconditional  0 never executed
    $$$$$: 1159-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1159-block  2
unconditional  3 never executed
        -: 1160:	{
    #####: 1161:	  if (i != currentPlayer)
    $$$$$: 1161-block  0
branch  0 never executed
branch  1 never executed
        -: 1162:	    {
    #####: 1163:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1164:	    }
    $$$$$: 1164-block  0
unconditional  0 never executed
    #####: 1165:	}
    $$$$$: 1165-block  0
unconditional  0 never executed
        -: 1166:
        -: 1167:      //discard played card from hand
    #####: 1168:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1169:
        -: 1170:      //trash copies of cards returned to supply
    #####: 1171:      for (j = 0; j < choice2; j++)
    $$$$$: 1171-block  0
unconditional  0 never executed
    $$$$$: 1171-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1171-block  2
unconditional  3 never executed
        -: 1172:	{
    #####: 1173:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1173-block  0
unconditional  0 never executed
    $$$$$: 1173-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1173-block  2
unconditional  3 never executed
        -: 1174:	    {
    #####: 1175:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1175-block  0
branch  0 never executed
branch  1 never executed
        -: 1176:		{
    #####: 1177:		  discardCard(i, currentPlayer, state, 1);
    #####: 1178:		  break;
    $$$$$: 1178-block  0
unconditional  0 never executed
        -: 1179:		}
    #####: 1180:	    }
    $$$$$: 1180-block  0
unconditional  0 never executed
    #####: 1181:	}			
    $$$$$: 1181-block  0
unconditional  0 never executed
        -: 1182:
    #####: 1183:      return 0;
    $$$$$: 1183-block  0
unconditional  0 never executed
        -: 1184:		
        -: 1185:    case embargo: 
        -: 1186:      //+2 Coins
    #####: 1187:      state->coins = state->coins + 2;
        -: 1188:			
        -: 1189:      //see if selected pile is in play
    #####: 1190:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1190-block  0
branch  0 never executed
branch  1 never executed
        -: 1191:	{
    #####: 1192:	  return -1;
    $$$$$: 1192-block  0
unconditional  0 never executed
        -: 1193:	}
        -: 1194:			
        -: 1195:      //add embargo token to selected supply pile
    #####: 1196:      state->embargoTokens[choice1]++;
        -: 1197:			
        -: 1198:      //trash card
    #####: 1199:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1200:      return 0;
    $$$$$: 1200-block  0
unconditional  0 never executed
        -: 1201:		
        -: 1202:    case outpost:
        -: 1203:      //set outpost flag
    #####: 1204:      state->outpostPlayed++;
        -: 1205:			
        -: 1206:      //discard card
    #####: 1207:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1208:      return 0;
    $$$$$: 1208-block  0
unconditional  0 never executed
        -: 1209:		
        -: 1210:    case salvager:
        -: 1211:      //+1 buy
    #####: 1212:      state->numBuys++;
        -: 1213:			
    #####: 1214:      if (choice1)
    $$$$$: 1214-block  0
branch  0 never executed
branch  1 never executed
        -: 1215:	{
        -: 1216:	  //gain coins equal to trashed card
    #####: 1217:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1218:	  //trash card
    #####: 1219:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1220:	}
    $$$$$: 1220-block  0
unconditional  0 never executed
        -: 1221:			
        -: 1222:      //discard card
    #####: 1223:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1224:      return 0;
    $$$$$: 1224-block  0
unconditional  0 never executed
        -: 1225:		
        -: 1226:    case sea_hag:
    #####: 1227:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1227-block  0
unconditional  0 never executed
    $$$$$: 1227-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1227-block  2
unconditional  3 never executed
    #####: 1228:	if (i != currentPlayer){
    $$$$$: 1228-block  0
branch  0 never executed
branch  1 never executed
    #####: 1229:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1230:	  state->discardCount[i]++;
    #####: 1231:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1232:	}
    $$$$$: 1232-block  0
unconditional  0 never executed
    #####: 1233:      }
    $$$$$: 1233-block  0
unconditional  0 never executed
    #####: 1234:      return 0;
    $$$$$: 1234-block  0
unconditional  0 never executed
        -: 1235:		
        -: 1236:    case treasure_map:
        -: 1237:      //search hand for another treasure_map
    #####: 1238:      index = -1;
    #####: 1239:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1239-block  0
unconditional  0 never executed
    $$$$$: 1239-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1239-block  2
unconditional  3 never executed
        -: 1240:	{
    #####: 1241:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1241-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1241-block  1
branch  2 never executed
branch  3 never executed
        -: 1242:	    {
    #####: 1243:	      index = i;
    #####: 1244:	      break;
    $$$$$: 1244-block  0
unconditional  0 never executed
        -: 1245:	    }
    #####: 1246:	}
    $$$$$: 1246-block  0
unconditional  0 never executed
    #####: 1247:      if (index > -1)
    $$$$$: 1247-block  0
branch  0 never executed
branch  1 never executed
        -: 1248:	{
        -: 1249:	  //trash both treasure cards
    #####: 1250:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1251:	  discardCard(index, currentPlayer, state, 1);
        -: 1252:
        -: 1253:	  //gain 4 Gold cards
    #####: 1254:	  for (i = 0; i < 4; i++)
    $$$$$: 1254-block  0
unconditional  0 never executed
    $$$$$: 1254-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1254-block  2
unconditional  3 never executed
        -: 1255:	    {
    #####: 1256:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1257:	    }
    $$$$$: 1257-block  0
unconditional  0 never executed
        -: 1258:				
        -: 1259:	  //return success
    #####: 1260:	  return 1;
    $$$$$: 1260-block  0
unconditional  0 never executed
        -: 1261:	}
        -: 1262:			
        -: 1263:      //no second treasure_map found in hand
    #####: 1264:      return -1;
    $$$$$: 1264-block  0
unconditional  0 never executed
        -: 1265:    }
        -: 1266:	
    #####: 1267:  return -1;
    $$$$$: 1267-block  0
unconditional  0 never executed
      365: 1268:}
      365: 1268-block  0
unconditional  0 taken 365
        -: 1269:
function discardCard called 630 returned 100% blocks executed 100%
        -: 1270:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1271:{
        -: 1272:	
        -: 1273:  //if card is not trashed, added to Played pile 
      630: 1274:  if (trashFlag < 1)
      630: 1274-block  0
branch  0 taken 540
branch  1 taken 90
        -: 1275:    {
        -: 1276:      //add card to played pile
      540: 1277:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      540: 1278:      state->playedCardCount++;
      540: 1279:    }
      540: 1279-block  0
unconditional  0 taken 540
        -: 1280:	
        -: 1281:  //set played card to -1
      630: 1282:  state->hand[currentPlayer][handPos] = -1;
        -: 1283:	
        -: 1284:  //remove card from player's hand
      630: 1285:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
      630: 1285-block  0
branch  0 taken 27
branch  1 taken 603
        -: 1286:    {
        -: 1287:      //reduce number of cards in hand
       27: 1288:      state->handCount[currentPlayer]--;
       27: 1289:    }
       27: 1289-block  0
unconditional  0 taken 27
      603: 1290:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
      603: 1290-block  0
branch  0 taken 27
branch  1 taken 576
        -: 1291:    {
        -: 1292:      //reduce number of cards in hand
       27: 1293:      state->handCount[currentPlayer]--;
       27: 1294:    }
       27: 1294-block  0
unconditional  0 taken 27
        -: 1295:  else 	
        -: 1296:    {
        -: 1297:      //replace discarded card with last card in hand
      576: 1298:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1299:      //set last card to -1
      576: 1300:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1301:      //reduce number of cards in hand
      576: 1302:      state->handCount[currentPlayer]--;
      576: 1302-block  0
unconditional  0 taken 576
        -: 1303:    }
        -: 1304:	
      630: 1305:  return 0;
      630: 1305-block  0
unconditional  0 taken 630
        -: 1306:}
        -: 1307:
function gainCard called 50 returned 100% blocks executed 81%
        -: 1308:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1309:{
        -: 1310:  //Note: supplyPos is enum of choosen card
        -: 1311:	
        -: 1312:  //check if supply pile is empty (0) or card is not used in game (-1)
       50: 1313:  if ( supplyCount(supplyPos, state) < 1 )
       50: 1313-block  0
branch  0 taken 0
branch  1 taken 50
        -: 1314:    {
    #####: 1315:      return -1;
    $$$$$: 1315-block  0
unconditional  0 never executed
        -: 1316:    }
        -: 1317:	
        -: 1318:  //added card for [whoseTurn] current player:
        -: 1319:  // toFlag = 0 : add to discard
        -: 1320:  // toFlag = 1 : add to deck
        -: 1321:  // toFlag = 2 : add to hand
        -: 1322:
       50: 1323:  if (toFlag == 1)
       50: 1323-block  0
branch  0 taken 35
branch  1 taken 15
        -: 1324:    {
       35: 1325:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       35: 1326:      state->deckCount[player]++;
       35: 1327:    }
       35: 1327-block  0
unconditional  0 taken 35
       15: 1328:  else if (toFlag == 2)
       15: 1328-block  0
branch  0 taken 15
branch  1 taken 0
        -: 1329:    {
       15: 1330:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       15: 1331:      state->handCount[player]++;
       15: 1332:    }
       15: 1332-block  0
unconditional  0 taken 15
        -: 1333:  else
        -: 1334:    {
    #####: 1335:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1336:      state->discardCount[player]++;
    $$$$$: 1336-block  0
unconditional  0 never executed
        -: 1337:    }
        -: 1338:	
        -: 1339:  //decrease number in supply pile
       50: 1340:  state->supplyCount[supplyPos]--;
        -: 1341:	 
       50: 1342:  return 0;
       50: 1342-block  0
unconditional  0 taken 50
       50: 1343:}
       50: 1343-block  0
unconditional  0 taken 50
        -: 1344:
function updateCoins called 1651 returned 100% blocks executed 100%
        -: 1345:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1346:{
        -: 1347:  int i;
        -: 1348:	
        -: 1349:  //reset coin count
     1651: 1350:  state->coins = 0;
        -: 1351:
        -: 1352:  //add coins for each Treasure card in player's hand
     8586: 1353:  for (i = 0; i < state->handCount[player]; i++)
     1651: 1353-block  0
unconditional  0 taken 1651
     8586: 1353-block  1
branch  1 taken 6935
branch  2 taken 1651
     6935: 1353-block  2
unconditional  3 taken 6935
        -: 1354:    {
     6935: 1355:      if (state->hand[player][i] == copper)
     6935: 1355-block  0
branch  0 taken 4314
branch  1 taken 2621
        -: 1356:	{
     4314: 1357:	  state->coins += 1;
     4314: 1358:	}
     4314: 1358-block  0
unconditional  0 taken 4314
     2621: 1359:      else if (state->hand[player][i] == silver)
     2621: 1359-block  0
branch  0 taken 1060
branch  1 taken 1561
        -: 1360:	{
     1060: 1361:	  state->coins += 2;
     1060: 1362:	}
     1060: 1362-block  0
unconditional  0 taken 1060
     1561: 1363:      else if (state->hand[player][i] == gold)
     1561: 1363-block  0
branch  0 taken 685
branch  1 taken 876
        -: 1364:	{
      685: 1365:	  state->coins += 3;
      685: 1366:	}	
      685: 1366-block  0
unconditional  0 taken 685
     6935: 1367:    }	
     6935: 1367-block  0
unconditional  0 taken 6935
        -: 1368:
        -: 1369:  //add bonus
     1651: 1370:  state->coins += bonus;
        -: 1371:
     1651: 1372:  return 0;
     1651: 1372-block  0
unconditional  0 taken 1651
        -: 1373:}
        -: 1374:
        -: 1375:
        -: 1376://end of dominion.c
        -: 1377:
